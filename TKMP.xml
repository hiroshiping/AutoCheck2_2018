<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TKMP</name>
    </assembly>
    <members>
        <member name="T:TKMP.Writer.StringIsNotMailAddressException">
            <summary>
            文字列がメールアドレスでないことを示す例外  
            </summary>
        </member>
        <member name="M:TKMP.Writer.StringIsNotMailAddressException.#ctor(System.String)">
            <summary>
            インスタンスの初期化
            </summary>
        </member>
        <member name="T:TKMP.Smtp.Command.Command_Greeting">
            <summary>
            ログオン処理を実行します
            </summary>
        </member>
        <member name="T:TKMP.Smtp.Command.CommandBase">
            <summary>
            通信処理の基本クラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.CommandBase.ENDCODE1">
            <summary>
            終了コード１「CrLf」
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.CommandBase.OnMessageReceive(TKMP.Net.MessageArgs)">
            <summary>
             データ受信直後のイベントを発生する
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Smtp.Command.CommandBase.OnMessageSend(TKMP.Net.MessageArgs)">
            <summary>
             データ送信直後のイベントを発生する
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Smtp.Command.CommandBase.OnExecutionEnd(System.EventArgs)">
            <summary>
            コマンドの実行が終了したときのイベントを発生する
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:TKMP.Smtp.Command.CommandBase._CommandEnd">
            <summary>
            通信処理が終了している事を示す値
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.CommandBase._CommandError">
            <summary>
            通信エラーが発生したことを示す値
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.CommandBase._NetStream">
            <summary>
            送受信を行うためのストリームクラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.CommandBase._TimeOutInterval">
            <summary>
            タイムアウトまでの時間（秒）
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.CommandBase._ErrorException">
            <summary>
            通信中に発生した特定可能なエラー
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.CommandBase._Response">
            <summary>
            レスポンス情報を格納するクラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.CommandBase._ReceiveStr">
            <summary>
            受信中の文字列
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.CommandBase.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.CommandBase.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.CommandBase.Execution(System.IO.Stream,System.Int32)">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.CommandBase.Send(System.String)">
            <summary>
            送受信処理を行う
            </summary>
            <param name="Message">送信メッセージ</param>
            <returns>正常にレスポンスコードを受信できたときにtrue</returns>
        </member>
        <member name="M:TKMP.Smtp.Command.CommandBase.Send(System.String,System.String)">
            <summary>
            送受信処理を行う
            </summary>
            <param name="Message">送信メッセージ</param>
            <param name="LogMessage">ログ用文字列</param>
            <returns>正常にレスポンスコードを受信できたときにtrue</returns>
        </member>
        <member name="M:TKMP.Smtp.Command.CommandBase.SendBody(System.Byte[])">
            <summary>
            本文のデータ送信を行う
            </summary>
            <param name="BodyData"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Smtp.Command.CommandBase.SendString(System.String,System.String)">
            <summary>
            データ送信処理
            </summary>
            <param name="Message">送信メッセージ</param>
            <param name="LogMessage">ログ用文字列</param>
        </member>
        <member name="M:TKMP.Smtp.Command.CommandBase.ReceiveWait">
            <summary>
            受信結果を待つ
            </summary>
            <returns>正常終了でtrue</returns>
        </member>
        <member name="M:TKMP.Smtp.Command.CommandBase.ReceiveWaitCallBack">
            <summary>
            メッセージ受信待ち中に発生するコールバックメソッド
            </summary>
            <returns>スレッドにウエイトを挿入する場合にture</returns>
        </member>
        <member name="E:TKMP.Smtp.Command.CommandBase.MessageReceive">
            <summary>
            データ受信直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Smtp.Command.CommandBase.MessageSend">
            <summary>
            データ送信直直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Smtp.Command.CommandBase.ExecutionEnd">
            <summary>
            コマンドの実行が終了したときのイベント
            </summary>
        </member>
        <member name="P:TKMP.Smtp.Command.CommandBase.CommandEnd">
            <summary>
            通信処理が終了している事を示す値の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Smtp.Command.CommandBase.CommandError">
            <summary>
            通信エラーが発生したことを示す値の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Smtp.Command.CommandBase.Socket">
            <summary>
            通信用のソケットクラスの読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Smtp.Command.CommandBase.ErrorException">
            <summary>
            通信中に発生した特定可能なエラーを読み出す
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Greeting.SIZE_PATTERN">
            <summary>
            SIZE情報の読み取り用正規表現パターン
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Greeting.STARTTLS_PATTERN">
            <summary>
            STARTTLS情報の読み取り用正規表現パターン
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Greeting.SIZE_REGEX">
            <summary>
            SIZE情報の読み取り用正規表現クラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Greeting.STARTTLS_REGEX">
            <summary>
            STARTTLS情報の読み取り用正規表現クラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Greeting._ConnectionResponse">
            <summary>
            接続時にサーバーが返してきた文字列
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Greeting._SmtpLogon">
            <summary>
            ログオン処理クラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Greeting._SIZE">
            <summary>
            SIZE情報から得られた値
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Greeting._CanTls">
            <summary>
            ＴＬＳによる暗号化通信が可能なことを示す値
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.Command_Greeting.#ctor(TKMP.Net.ISmtpLogon,System.String)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.Command_Greeting.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.Command_Greeting.Greeting(System.String)">
            <summary>
            接続時の自己紹介
            </summary>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Smtp.Command.Command_Greeting.GetCommandData(System.String)">
            <summary>
            EHLOによって得られた情報を解析する
            </summary>
            <param name="Res"></param>
        </member>
        <member name="P:TKMP.Smtp.Command.Command_Greeting.SIZE">
            <summary>
            SIZE情報から得られた値の読み出しを行なう(SIZE情報が無い場合はint32の最大値) 
            </summary>
        </member>
        <member name="P:TKMP.Smtp.Command.Command_Greeting.CanTls">
            <summary>
            ＴＬＳによる暗号化通信が可能なことを示す値の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Smtp.Command.Command_Greeting.Response">
            <summary>
            受信メッセージ
            </summary>
        </member>
        <member name="T:TKMP.Smtp.Command.MAIL_FROM">
            <summary>
            差出人アドレスを送信するコマンドクラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.MAIL_FROM._Address">
            <summary>
            差出人アドレス
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.MAIL_FROM.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.MAIL_FROM.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Smtp.Command.DATA">
            <summary>
            本文を送信するコマンドクラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.DATA._Data">
            <summary>
            メール本文
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.DATA.#ctor(System.IO.Stream)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.DATA.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.DATA.WriteBodyText(System.IO.Stream)">
            <summary>
            本文のストリームを出力用ストリームに書き込む
            </summary>
            <param name="InputStream"></param>
        </member>
        <member name="T:TKMP.Reader.Header.HeaderCollection">
            <summary>
            ヘッダ情報の格納専用コレクションクラス
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.HeaderCollection.HeaderJoinChar">
            <summary>
            複数行ヘッダのデータ部分を連結する文字
            </summary>
        </member>
        <member name="M:TKMP.Reader.Header.HeaderCollection.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Reader.Header.HeaderCollection.Append(TKMP.Reader.Header.HeaderString)">
            <summary>
            ヘッダフィールドを追加します（既に同一名称がある場合はデータを追加していく）
            </summary>
            <param name="Data">ヘッダデータの格納クラス</param>
        </member>
        <member name="M:TKMP.Reader.Header.HeaderCollection.HeaderItem(System.String)">
            <summary>
            ヘッダ情報の格納クラスを返す
            </summary>
            <param name="HeaderCode">ヘッダのフィールド名</param>
            <returns>ヘッダ情報を格納しているクラス</returns>
            <remarks>
            <para>ヘッダ情報の一覧から[HeaderCode]を示すヘッダ情報クラスを返します。</para>
            <para>該当するヘッダ情報クラスが存在しない場合はnullを返します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Reader.Header.HeaderCollection.Item(System.String)">
            <summary>
            格納しているヘッダ情報クラスをインディックス指定で読み出します
            </summary>
        </member>
        <member name="T:TKMP.Pop.Command.CommandBase">
            <summary>
            通信処理の基本クラス
            </summary>
        </member>
        <member name="T:TKMP.Common.CommandBase">
            <summary>
            通信処理の基本クラス
            </summary>
        </member>
        <member name="M:TKMP.Common.CommandBase.OnMessageReceive(TKMP.Net.MessageArgs)">
            <summary>
             データ受信直後のイベントを発生する
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Common.CommandBase.OnMessageSend(TKMP.Net.MessageArgs)">
            <summary>
             データ送信直後のイベントを発生する
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Common.CommandBase.OnExecutionStarting(TKMP.Common.CommandBase.ExecutionStartingArgs)">
            <summary>
            コマンド処理が始まる直前のイベントを発生する
            </summary>
        </member>
        <member name="M:TKMP.Common.CommandBase.OnExecutionEnd(System.EventArgs)">
            <summary>
            コマンドの実行が終了したときのイベントを発生する
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:TKMP.Common.CommandBase._CommandEnd">
            <summary>
            通信処理が終了している事を示す値
            </summary>
        </member>
        <member name="F:TKMP.Common.CommandBase._CommandCancel">
            <summary>
            通信処理がキャンセルされ何も行われなかったことを示す値
            </summary>
        </member>
        <member name="F:TKMP.Common.CommandBase._CommandError">
            <summary>
            通信エラーが発生したことを示す値
            </summary>
        </member>
        <member name="F:TKMP.Common.CommandBase._NetStream">
            <summary>
            送受信を行うためのストリームクラス
            </summary>
        </member>
        <member name="F:TKMP.Common.CommandBase.EventQueue">
            <summary>
            同期実行時のイベント格納キュー
            </summary>
        </member>
        <member name="F:TKMP.Common.CommandBase.ConnectionException">
            <summary>
            通信中に発生した例外
            </summary>
        </member>
        <member name="F:TKMP.Common.CommandBase._TimeOutInterval">
            <summary>
            タイムアウトまでの時間（秒）
            </summary>
        </member>
        <member name="M:TKMP.Common.CommandBase.#ctor(System.Boolean,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Background"></param>
            <param name="CommandCancel"></param>
        </member>
        <member name="M:TKMP.Common.CommandBase.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="M:TKMP.Common.CommandBase.Execution(System.IO.Stream,System.Int32)">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="E:TKMP.Common.CommandBase.MessageReceive">
            <summary>
            データ受信直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Common.CommandBase.MessageSend">
            <summary>
            データ送信直直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Common.CommandBase.ExecutionStarting">
            <summary>
            コマンド処理が始まる直前のイベント
            </summary>
        </member>
        <member name="E:TKMP.Common.CommandBase.ExecutionEnd">
            <summary>
            コマンドの実行が終了したときのイベント
            </summary>
        </member>
        <member name="P:TKMP.Common.CommandBase.IsBackground">
            <summary>
            この処理がバックグラウンド処理であることを示す値。通常処理より後回しにされる。
            </summary>
        </member>
        <member name="P:TKMP.Common.CommandBase.CanCommandCancel">
            <summary>
            この処理が終了時にキャンセル可能なことを示すフラグ
            </summary>
        </member>
        <member name="P:TKMP.Common.CommandBase.CommandEnd">
            <summary>
            通信処理が終了している事を示す値の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Common.CommandBase.CommandCancel">
            <summary>
            通信処理がキャンセルされ何も行われなかったことを示す値の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Common.CommandBase.CommandError">
            <summary>
            通信エラーが発生したことを示す値の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Common.CommandBase.NetStream">
            <summary>
            通信用のストリームの読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Common.CommandBase.TimeOutInterval">
            <summary>
            タイムアウトまでの時間（秒）
            </summary>
        </member>
        <member name="T:TKMP.Common.CommandBase.ExecutionStartingArgs">
            <summary>
            コマンド処理が始まる直前のイベントデータ
            </summary>
        </member>
        <member name="F:TKMP.Common.CommandBase.ExecutionStartingArgs.Cancel">
            <summary>
            コマンド実行をキャンセルすることを示す値
            </summary>
        </member>
        <member name="M:TKMP.Common.CommandBase.ExecutionStartingArgs.#ctor">
            <summary>
            新しいインスタンスを作成する
            </summary>
        </member>
        <member name="T:TKMP.Common.CommandBase.ExecutionStartingHandler">
            <summary>
            コマンド処理が始まる直前のイベントハンドル
            </summary>
        </member>
        <member name="F:TKMP.Pop.Command.CommandBase.ENDCODE1">
            <summary>
            終了コード１「CrLf」
            </summary>
        </member>
        <member name="F:TKMP.Pop.Command.CommandBase.ENDCODE2">
            <summary>
            終了コード２「CrLf . CrLf」
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.CommandBase.#ctor(System.Boolean,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Background"></param>
            <param name="CommandCancel"></param>
        </member>
        <member name="M:TKMP.Pop.Command.CommandBase.Send(System.String,System.String)">
            <summary>
            送受信処理を行う
            </summary>
            <param name="Message"></param>
            <param name="EndString"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Pop.Command.CommandBase.SendString(System.String)">
            <summary>
            データ送信処理
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:TKMP.Pop.Command.CommandBase.ReceiveWait(System.String,System.String@)">
            <summary>
            結果受信待ち
            </summary>
            <returns>正常に受信するとtrue</returns>
        </member>
        <member name="T:TKMP.Net.AuthenticationProtocols">
            <summary>
            通信で使用する暗号化プロトコルを選択します
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthenticationProtocols.None">
            <summary>
            通信で暗号化を行わないことを指定します
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthenticationProtocols.SSL">
            <summary>
            ＳＳＬを使用して暗号化通信を行います
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthenticationProtocols.TLS">
            <summary>
            ＴＬＳを使用して暗号化通信を行います 
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthenticationProtocols.TryTLS">
            <summary>
            利用可能ならＴＬＳを使用して暗号化通信を行います 
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.Command_Connect">
            <summary>
            接続時の処理をするコマンド
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.CommandBase">
            <summary>
            通信処理の基本クラス
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.CommandBase.DEFAULT_SEND_BUFFER_SIZE">
            <summary>
            送信用バッファサイズ
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.CommandBase.DEFAULT_RECEIVE_BUFFER_SIZE">
            <summary>
            受信バッファサイズ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.CommandBase.OnDataReceive(TKMP.Net.DataReceiveArgs)">
            <summary>
            データ受信中に発生するイベントを発行します
            </summary>
            <param name="e">受信データサイズを格納しているイベントデータ</param>
        </member>
        <member name="M:TKMP.Imap.Command.CommandBase.OnDataLoaded(System.EventArgs)">
            <summary>
            データの受信完了イベントを発生します
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Imap.Command.CommandBase.OnDataForward(TKMP.Net.DataForwardArgs)">
            <summary>
            データ受信中に発生するイベントを発行します
            </summary>
            <param name="e">受信データサイズを格納しているイベントデータ</param>
        </member>
        <member name="F:TKMP.Imap.Command.CommandBase.CommandNumber">
            <summary>
            コマンド発行番号管理クラス
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.CommandBase._CommandNumber">
            <summary>
            現在発行中のコマンド番号
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.CommandBase._BinaryList">
            <summary>
            受信処理中に取得したバイナリデータの一覧
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.CommandBase.ResponseEndValidateMthod">
            <summary>
            コマンドレスポンスの終了条件を判定するメソッド
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.CommandBase.NoSerialNumber">
            <summary>
            送信時にコマンドシリアル番号を付加しない
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.CommandBase.#ctor(System.Boolean,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Background"></param>
            <param name="CommandCancel"></param>
        </member>
        <member name="M:TKMP.Imap.Command.CommandBase.ExecutionRelay(TKMP.Imap.Command.CommandBase)">
            <summary>
            このコマンドクラスの条件で指定したコマンドを実行する
            </summary>
            <param name="Command"></param>
        </member>
        <member name="M:TKMP.Imap.Command.CommandBase.Send(System.IO.Stream)">
            <summary>
            送受信処理を行う
            </summary>
            <param name="Stream">送信メッセージ</param>
            <returns>正常にレスポンスコードを受信できたときにtrue</returns>
        </member>
        <member name="M:TKMP.Imap.Command.CommandBase.Send(System.String)">
            <summary>
            送受信処理を行う
            </summary>
            <param name="Message">送信メッセージ</param>
            <returns>正常にレスポンスコードを受信できたときにtrue</returns>
        </member>
        <member name="M:TKMP.Imap.Command.CommandBase.Send(System.String,System.String)">
            <summary>
            送受信処理を行う
            </summary>
            <param name="Message">送信メッセージ</param>
            <param name="LogMessage">ログ用文字列</param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Imap.Command.CommandBase.SendString(System.String,System.String)">
            <summary>
            データ送信処理
            </summary>
            <param name="Message"></param>
            <param name="LogMessage"></param>
        </member>
        <member name="M:TKMP.Imap.Command.CommandBase.ReceiveWait(System.String@)">
            <summary>
            結果受信待ち
            </summary>
            <returns>正常に受信するとtrue</returns>
        </member>
        <member name="E:TKMP.Imap.Command.CommandBase.DataReceive">
            <summary>
            データ受信中に発生するイベント
            </summary>
            <remarks>
            <para>受信バッファにあるデータを処理するごとに発生します。このイベントの処理に時間がかかると通信速度に影響が出ます。</para>
            </remarks>
        </member>
        <member name="E:TKMP.Imap.Command.CommandBase.DataLoaded">
            <summary>
            データの受信完了イベント
            </summary>
        </member>
        <member name="E:TKMP.Imap.Command.CommandBase.DataForward">
            <summary>
            データ受信中に発生するイベント
            </summary>
            <remarks>
            <para>受信バッファにあるデータを処理するごとに発生します。このイベントの処理に時間がかかると通信速度に影響が出ます。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Imap.Command.CommandBase.ReadLength">
            <summary>
            読み込み済みのデータサイズの読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.CommandBase.ReviceStream">
            <summary>
            受信データの格納用ストリームクラス
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.CommandBase.ReviceStream._TempBuffer">
            <summary>
            内部展開バッファ
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.CommandBase.ReviceStream._Buffer">
            <summary>
            受信データバッファ
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.CommandBase.ReviceStream._Stream">
            <summary>
            通信ストリーム
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.CommandBase.ReviceStream.#ctor(System.IO.Stream)">
            <summary>
            コンストラクタ
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:TKMP.Imap.Command.CommandBase.ReviceStream.Load">
            <summary>
            データ受信を行う
            </summary>
            <returns>取得成功でtrueを返す</returns>
        </member>
        <member name="M:TKMP.Imap.Command.CommandBase.ReviceStream.GetLineString">
            <summary>
            受信バッファから１行分のデータ文字列を取り出す
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKMP.Imap.Command.CommandBase.ReviceStream.GetByte(System.Int32)">
            <summary>
            受信バッファから指定したバイト数のデータを取り出す
            </summary>
            <param name="loadsize"></param>
            <returns></returns>
        </member>
        <member name="T:TKMP.Common.ICommand_Connect">
            <summary>
            接続開始コマンドのインターフェイスを提供する
            </summary>
        </member>
        <member name="P:TKMP.Common.ICommand_Connect.ConnectionString">
            <summary>
            接続時のサーバーメッセージの読み出しを行います
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.Command_Connect._ConnectionString">
            <summary>
            接続時のサーバーメッセージ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.Command_Connect.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.Command_Connect.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="P:TKMP.Imap.Command.Command_Connect.ConnectionString">
            <summary>
            接続時のサーバーメッセージの読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.DELETE">
            <summary>
            DELETEコマンドを発行する
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.DELETE._MailBox">
            <summary>
            選択するメールボックス名
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.DELETE.#ctor(TKMP.Net.Mailbox)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.DELETE.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.CAPABILITY">
            <summary>
            CAPABILITYコマンドを発行する
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.CAPABILITY._CommandList">
            <summary>
            取得したコマンドリスト
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.CAPABILITY.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.CAPABILITY.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.CAPABILITY.CanSipport(TKMP.Imap.Command.CommandBase)">
            <summary>
            コマンドのサポート状況を調べる
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:TKMP.Reader.Header.HeaderString">
            <summary>
            ヘッダデータの格納用
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.HeaderString._HeaderMatchPattern">
            <summary>
            ヘッダ文字列のデコード処理用正規表現
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.HeaderString._Name">
            <summary>
            このヘッダの名称
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.HeaderString._NameToLower">
            <summary>
            このヘッダの名称を全て小文字にした文字列
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.HeaderString._Data">
            <summary>
            このヘッダのデータ
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.HeaderString._SourceData">
            <summary>
            このヘッダのデコード前の文字列
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.HeaderString._JoinHeader">
            <summary>
            複数ヘッダの場合の次に続くヘッダ情報
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.HeaderString._LineJoinString">
            <summary>
            ヘッダ情報が複数行の場合に各行を連結する文字
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.HeaderString._RecordJoinString">
            <summary>
            ヘッダ情報が複数存在するときに各情報を連結する文字
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.HeaderString._DecodeCharset">
            <summary>
            ヘッダをデコードする時のキャラクタセット
            </summary>
        </member>
        <member name="M:TKMP.Reader.Header.HeaderString.#ctor(System.String)">
            <summary>
            ヘッダ用データの格納とデコード処理
            </summary>
            <param name="s">[**** : *******]形式のデータ </param>
        </member>
        <member name="M:TKMP.Reader.Header.HeaderString.AddNewLine(System.String)">
            <summary>
            複数行のフィールドを連結する
            </summary>
            <param name="Source"></param>
        </member>
        <member name="M:TKMP.Reader.Header.HeaderString.JoinHeader(TKMP.Reader.Header.HeaderString)">
            <summary>
            複数フィールドを持つヘッダを連結する
            </summary>
            <param name="JoinHeader"></param>
        </member>
        <member name="M:TKMP.Reader.Header.HeaderString.DataClear">
            <summary>
            デコードしたヘッダ情報を初期化する
            </summary>
        </member>
        <member name="M:TKMP.Reader.Header.HeaderString.HeaderDecode(System.String)">
            <summary>
            ヘッダ文字列のデコード処理を行ないます
            </summary>
            <param name="Source">変換前の文字列</param>
            <returns>変換された文字列</returns>
        </member>
        <member name="M:TKMP.Reader.Header.HeaderString.HeaderDecode(System.String,System.String)">
            <summary>
            文字コードを指定して、ヘッダ文字列のデコード処理を行ないます
            </summary>
            <param name="Source">変換前の文字列</param>
            <param name="DecodeCharset">デコードを行なう文字コード</param>
            <returns>変換された文字列</returns>
        </member>
        <member name="P:TKMP.Reader.Header.HeaderString.DecodeCharset">
            <summary>
            ヘッダをデコードする時のキャラクタセットの読み出しと設定を行ないます。
            </summary>
            <remarks>
            <para>nullを指定した場合は通常の解析ルールに従って、文字コードをデコードします。</para>
            <para>読み出される値は、解析に使用されたキャラクタセットではなく、このプロパティを通して指定された値です。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Reader.Header.HeaderString.LineJoinString">
            <summary>
            ヘッダ情報が複数行の場合に各行を連結する文字の読み出しと設定を行ないます
            </summary>
            <remarks>
            <para>通常この文字列は string.Empty で問題ありませんが、</para>
            <para>Receivedヘッダを読み出す場合は " "(空白)を指定すると解析しやすくなります。</para>
            <para>初期値 string.Empty</para>
            </remarks>
        </member>
        <member name="P:TKMP.Reader.Header.HeaderString.RecordJoinString">
            <summary>
            ヘッダ情報が複数存在するときに各情報を連結する文字の読み出しと設定を行ないます
            </summary>
            <remarks>
            <para>Receivedヘッダなどは中継サーバー毎にヘッダ情報を付加するので、</para>
            <para>個々のヘッダを区切るための文字列として使用されます。</para>
            <para>初期値 \t</para>
            </remarks>
        </member>
        <member name="P:TKMP.Reader.Header.HeaderString.NameToLower">
            <summary>
            このヘッダの名称（すべて小文字）
            </summary>
        </member>
        <member name="P:TKMP.Reader.Header.HeaderString.Name">
            <summary>
            ヘッダフィールド名称の読み出しを行う
            </summary>
        </member>
        <member name="P:TKMP.Reader.Header.HeaderString.Data">
            <summary>
            フィールドデータの読み出しを行う
            </summary>
            <remarks>
            <para>デコード処理を行った後のデータを返します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Reader.Header.HeaderString.SourceData">
            <summary>
            このフィールドのデコード前の情報を読み出す
            </summary>
        </member>
        <member name="T:TKMP.Net.IPopLogon">
            <summary>
            ＰＯＰ３サーバーへのログオン処理をするクラスのに必要なインターフェイス
            </summary>
            <remarks>
            <para>サーバーへのログオン方法が特殊な場合このインターフェイスを継承することで、独自のログオン処理を作成することが可能です。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.IPopLogon.Connection(System.String,System.String@)">
            <summary>
            ログオン時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列（送信文字列無しの時はNull）</param>
            <returns>ログオン処理が継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.IPopLogon.Exit(System.String,System.String@)">
            <summary>
            切断時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列（送信文字列無しの時はNull）</param>
            <returns>切断処理が継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.IPopLogon.Initialize">
            <summary>
            ログオン処理を最初からやり直すための初期化を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Net.IPopLogon.Logon">
            <summary>
            ログオンが正常に行われたことを示す値読み出します
            </summary>
        </member>
        <member name="T:TKMP.Net.LogonException">
            <summary>
             ログオンに失敗したときに発生する例外  
            </summary>
        </member>
        <member name="M:TKMP.Net.LogonException.#ctor">
            <summary>
            インスタンスの初期化
            </summary>
        </member>
        <member name="T:TKMP.Net.SendException">
            <summary>
             送受信処理に失敗したときに発生する例外  
            </summary>
        </member>
        <member name="M:TKMP.Net.SendException.#ctor">
            <summary>
            インスタンスの初期化
            </summary>
        </member>
        <member name="T:TKMP.Net.AuthAuto">
            <summary>
            SMTP AUTH のログオン方法を自動で判別するクラス 
            </summary>
            <remarks>「CRAM-MD5」「PLAIN」「LOGIN」の順で利用可能なものを優先してログオン手順に使用します</remarks>
        </member>
        <member name="T:TKMP.Net.ISmtpLogon">
            <summary>
            ＳＭＴＰサーバーへのログオンを処理するのに必要なインターフェイス
            </summary>
        </member>
        <member name="M:TKMP.Net.ISmtpLogon.Greeting(System.String)">
            <summary>
            接続の確立直後の送信メッセージをセットします。
            </summary>
            <param name="Receive">受信した文字列</param>
            <returns>送信文字列が返されます（送信文字列無しの時はNull）</returns>
        </member>
        <member name="M:TKMP.Net.ISmtpLogon.Connection(System.String,System.String@,System.String@)">
            <summary>
            ログオン時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列が返されます（送信文字列無しの時はNull）</param>
            <param name="LogMessage">通信ログで表示する文字列が返されます。通常パスワードなど非表示としたい通信内容の場合に内容がセットされます。Sendを通信ログとする場合はNullがセットされます</param>
            <returns>ログオン処理を継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.ISmtpLogon.Initialize">
            <summary>
            ログオン処理を最初からやり直すための初期化を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Net.ISmtpLogon.Logon">
            <summary>
            ログオンが正常に行われたことを示す値読み出します
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthAuto._UserID">
            <summary>
            ユーザーＩＤ
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthAuto._Password">
            <summary>
            パスワード
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthAuto._SmtpLogon">
            <summary>
            自動判別を行ったログオンクラス
            </summary>
        </member>
        <member name="M:TKMP.Net.AuthAuto.#ctor(System.String,System.String)">
            <summary>
            SMTP AUTH のログオン方法を自動で判別するクラスのインスタンスを初期化します
            </summary>
            <param name="UserID">ユーザーＩＤ</param>
            <param name="Password">パスワード</param>
        </member>
        <member name="M:TKMP.Net.AuthAuto.TKMP#Net#ISmtpLogon#Greeting(System.String)">
            <summary>
            接続の確立直後の送信メッセージをセットします。
            </summary>
            <param name="Receive">受信した文字列</param>
            <returns>送信文字列が返されます（送信文字列無しの時はNull）</returns>
        </member>
        <member name="M:TKMP.Net.AuthAuto.TKMP#Net#ISmtpLogon#Connection(System.String,System.String@,System.String@)">
            <summary>
            ログオン時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列が返されます（送信文字列無しの時はNull）</param>
            <param name="LogMessage">通信ログで表示する文字列が返されます。通常パスワードなど非表示としたい通信内容の場合に内容がセットされます。Sendを通信ログとする場合はNullがセットされます</param>
            <returns>ログオン処理を継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.AuthAuto.TKMP#Net#ISmtpLogon#Initialize">
            <summary>
            ログオン処理を最初からやり直すための初期化を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Net.AuthAuto.TKMP#Net#ISmtpLogon#Logon">
            <summary>
            ログオンが正常に行われたことを示す値読み出します
            </summary>
        </member>
        <member name="T:TKMP.Imap.CurrentMailbox">
            <summary>
            現在のメールボックスの情報を持つクラス
            </summary>
        </member>
        <member name="M:TKMP.Imap.CurrentMailbox.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="P:TKMP.Imap.CurrentMailbox.CurrentMailboxUID">
            <summary>
            選択中のメールボックスUID
            </summary>
        </member>
        <member name="P:TKMP.Imap.CurrentMailbox.Name">
            <summary>
            選択中のメールボックスの名前
            </summary>
        </member>
        <member name="T:TKMP.Net.SearchKey.BEFORE">
            <summary>
            IMAPプロトコルのSINCEコマンドで検索を行うためのクラス。
            内部日付が指定した日付内またはそれより古いのメッセージ。 
            </summary>
        </member>
        <member name="T:TKMP.Net.SearchKeyBase">
            <summary>
            IMAPプロトコルで検索処理を行うときの条件の基本クラス
            </summary>
        </member>
        <member name="M:TKMP.Net.SearchKeyBase.#ctor">
            <summary>
            新しいインスタンスを作成します
            </summary>
        </member>
        <member name="M:TKMP.Net.SearchKeyBase.#cctor">
            <summary>
            静的コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Net.SearchKeyBase.GetSendData(TKMP.Net.SearchKeyBase.GetCommandMethod)">
            <summary>
            SEARCHコマンドで使用するコマンド文字列を読み出します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.SearchKeyBase.op_Addition(TKMP.Net.SearchKeyBase,TKMP.Net.SearchKeyBase)">
            <summary>
            条件の和を作成します
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.SearchKeyBase.op_Subtraction(TKMP.Net.SearchKeyBase,TKMP.Net.SearchKeyBase)">
            <summary>
            条件の差を作成します
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.SearchKeyBase.op_Multiply(TKMP.Net.SearchKeyBase,TKMP.Net.SearchKeyBase)">
            <summary>
            条件の和を作成します
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.SearchKeyBase.op_LogicalNot(TKMP.Net.SearchKeyBase)">
            <summary>
            否定条件を作成します
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:TKMP.Net.SearchKeyBase.HasBinary">
            <summary>
            検索条件にバイナリ値を含む事を示す値
            </summary>
        </member>
        <member name="P:TKMP.Net.SearchKeyBase.PreasSearchCommand">
            <summary>
            検索コマンドの作成に事前にコマンド実行をする必要がある事を示す値
            </summary>
        </member>
        <member name="T:TKMP.Net.SearchKeyBase.SendData">
            <summary>
            送信用情報
            </summary>
        </member>
        <member name="M:TKMP.Net.SearchKeyBase.SendData.#ctor(System.String,System.Byte[])">
            <summary>
            コンストラクタ
            </summary>
            <param name="text"></param>
            <param name="data"></param>
        </member>
        <member name="P:TKMP.Net.SearchKeyBase.SendData.Data">
            <summary>
            バイナリデータ
            </summary>
        </member>
        <member name="P:TKMP.Net.SearchKeyBase.SendData.Text">
            <summary>
            送信テキスト
            </summary>
        </member>
        <member name="M:TKMP.Net.SearchKey.BEFORE.#ctor(System.DateTime)">
            <summary>
            新しいインスタンスを作成します
            </summary>
            <param name="value">条件検索を行う日付</param>
        </member>
        <member name="M:TKMP.Net.SearchKey.BEFORE.GetSendData(TKMP.Net.SearchKeyBase.GetCommandMethod)">
            <summary>
            SEARCHコマンドで使用するコマンド文字列を読み出します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.SearchKey.BEFORE.GetDateTimeString(System.DateTime)">
            <summary>
            現在の日時文字列を作成する
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Net.SearchKey.BEFORE.Value">
            <summary>
            条件検索を行う日付
            </summary>
        </member>
        <member name="T:TKMP.Transfer.TransferQuotedPrintable">
            <summary>
            quoted-printableの処理クラス
            </summary>
        </member>
        <member name="T:TKMP.Transfer.ITransfer">
            <summary>
            エンコード、デーコードの基本インターフェイス
            </summary>
        </member>
        <member name="M:TKMP.Transfer.ITransfer.Decoding(System.Byte[])">
            <summary>
            デコード処理を行います。
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後のバイト配列</returns>
        </member>
        <member name="M:TKMP.Transfer.ITransfer.Encoding(System.Byte[])">
            <summary>
            エンコード処理を行います。
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="M:TKMP.Transfer.ITransfer.BodyEncoding(System.Byte[])">
            <summary>
            本文のエンコード処理を行います。変換結果は複数行になりリターンコードが挿入されます。
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="M:TKMP.Transfer.ITransfer.BodyEncodingByte(System.Byte[])">
            <summary>
            本文のエンコード処理を行います。変換結果は複数行になりリターンコードが挿入されます。
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="P:TKMP.Transfer.ITransfer.EncodingName">
            <summary>
            エンコード処理の名称の読出しを行います
            </summary>
        </member>
        <member name="F:TKMP.Transfer.TransferQuotedPrintable.ByteCode">
            <summary>
            変換用のバイト配列
            </summary>
        </member>
        <member name="M:TKMP.Transfer.TransferQuotedPrintable.#cctor">
            <summary>
            スタティックコンストラクタ
            </summary>
        </member>
        <member name="F:TKMP.Transfer.TransferQuotedPrintable._ConvertChar">
            <summary>
            変換識別キャラクタ
            </summary>
        </member>
        <member name="M:TKMP.Transfer.TransferQuotedPrintable.#ctor(System.Char)">
            <summary>
            コンストラクタ
            </summary>
            <param name="ConvertChar"></param>
        </member>
        <member name="M:TKMP.Transfer.TransferQuotedPrintable.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Transfer.TransferQuotedPrintable.TKMP#Transfer#ITransfer#Decoding(System.Byte[])">
            <summary>
            デコード処理
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後のバイト配列</returns>
        </member>
        <member name="M:TKMP.Transfer.TransferQuotedPrintable.TKMP#Transfer#ITransfer#Encoding(System.Byte[])">
            <summary>
            エンコード処理を行います
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="M:TKMP.Transfer.TransferQuotedPrintable.TKMP#Transfer#ITransfer#BodyEncoding(System.Byte[])">
            <summary>
            本文のエンコード処理を行います。変換結果は複数行になりリターンコードが挿入されます
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="M:TKMP.Transfer.TransferQuotedPrintable.TKMP#Transfer#ITransfer#BodyEncodingByte(System.Byte[])">
            <summary>
            本文のエンコード処理を行います。変換結果は複数行になりリターンコードが挿入されます
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="P:TKMP.Transfer.TransferQuotedPrintable.TKMP#Transfer#ITransfer#EncodingName">
            <summary>
            エンコード処理の名称の読出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Transfer.TransferNull">
            <summary>
            デコード処理を行わない(7Bit)の処理クラス
            </summary>
        </member>
        <member name="M:TKMP.Transfer.TransferNull.TKMP#Transfer#ITransfer#Decoding(System.Byte[])">
            <summary>
            デコード処理
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後のバイト配列</returns>
        </member>
        <member name="M:TKMP.Transfer.TransferNull.TKMP#Transfer#ITransfer#Encoding(System.Byte[])">
            <summary>
            エンコード処理を行います
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="M:TKMP.Transfer.TransferNull.TKMP#Transfer#ITransfer#BodyEncoding(System.Byte[])">
            <summary>
            本文のエンコード処理を行います。変換結果は複数行になりリターンコードが挿入されます
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="M:TKMP.Transfer.TransferNull.TKMP#Transfer#ITransfer#BodyEncodingByte(System.Byte[])">
            <summary>
            本文のエンコード処理を行います。変換結果は複数行になりリターンコードが挿入されます
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="P:TKMP.Transfer.TransferNull.TKMP#Transfer#ITransfer#EncodingName">
            <summary>
            エンコード処理の名称の読出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Common.cram_md5">
            <summary>
            AUTH CRAM-MD5のログオン管理クラス
            </summary>
        </member>
        <member name="F:TKMP.Common.cram_md5._Key">
            <summary>
            チャレンジコード
            </summary>
        </member>
        <member name="F:TKMP.Common.cram_md5._UserName">
            <summary>
            ユーザー名
            </summary>
        </member>
        <member name="F:TKMP.Common.cram_md5._PassWord">
            <summary>
            パスワード
            </summary>
        </member>
        <member name="M:TKMP.Common.cram_md5.#ctor(System.String,System.String,System.String)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Common.cram_md5.SendCode">
            <summary>
            送信用コードを読み出す
            </summary>
            <returns></returns>
        </member>
        <member name="T:TKMP.Pop.Command.STLS">
            <summary>
            ＴＬＳ暗号化通信へ移行するためのコマンド
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.STLS.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.STLS.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Net.MailData">
            <summary>
            POP接続用の受信メールの情報クラス
            </summary>
            <remarks>
            <para>メール単位での操作を行うためのクラスです。</para>
            </remarks>
        </member>
        <member name="T:TKMP.Net.IMailData">
            <summary>
            メールデータを処理するクラスのインターフェイスを提供します
            </summary>
        </member>
        <member name="M:TKMP.Net.IMailData.ReadBody">
            <summary>
            メール本文の読み出しを行います
            </summary>
            <returns>データの読み出し完了でtrueを返す</returns>
        </member>
        <member name="M:TKMP.Net.IMailData.ReadBodyAnsync">
            <summary>
            メール本文の読み出しを非同期で行います
            </summary>
            <returns>非同期読み出し開始でtrue</returns>
        </member>
        <member name="M:TKMP.Net.IMailData.ReadHeader">
            <summary>
            メールのヘッダー部分のみの読み出しを行います
            </summary>
            <returns>データの読み出し完了でtrueを返す</returns>
        </member>
        <member name="M:TKMP.Net.IMailData.ReadHeaderAnsync">
            <summary>
            メールのヘッダー部分のみの読み出しを非同期で行います
            </summary>
            <returns>非同期読み出し開始でtrue</returns>
        </member>
        <member name="M:TKMP.Net.IMailData.Delete">
            <summary>
            このメールをメールボックスから削除します
            </summary>
            <returns>削除を行ったときにtrueを返す</returns>
        </member>
        <member name="M:TKMP.Net.IMailData.DeleteAnsync">
            <summary>
            メールの削除を非同期で実行します
            </summary>
            <returns>コマンドを送信するとtrueを返す</returns>
        </member>
        <member name="E:TKMP.Net.IMailData.BodyDataReceive">
            <summary>
            メールデータの受信中に発生するイベント
            </summary>
        </member>
        <member name="E:TKMP.Net.IMailData.HeaderDataReceive">
            <summary>
            ヘッダーデータの受信中に発生するイベント
            </summary>
        </member>
        <member name="E:TKMP.Net.IMailData.BodyLoaded">
            <summary>
            非同期実行のメールデータ読み出しが終了したときのイベント
            </summary>
        </member>
        <member name="E:TKMP.Net.IMailData.HeaderLoaded">
            <summary>
            非同期実行のヘッダー読み出しが終了したときのイベント
            </summary>
        </member>
        <member name="P:TKMP.Net.IMailData.UID">
            <summary>
            メールのユニークＩＤの読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.IMailData.Length">
            <summary>
            メールのサイズの読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.IMailData.DataStream">
            <summary>
            メールデータを格納しているストリームの読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.IMailData.HeaderStream">
            <summary>
            ヘッダーデータを格納しているストリームの読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.IMailData.HeaderLoadedLength">
            <summary>
            読込み済みのヘッダーデータのバイト数を返します
            </summary>
        </member>
        <member name="P:TKMP.Net.IMailData.BodyLoadedLength">
            <summary>
            読込み済みのメールデータのバイト数を返します
            </summary>
        </member>
        <member name="M:TKMP.Net.MailData.OnHeaderDataReceive(TKMP.Net.DataReceiveArgs)">
            <summary>
            ヘッダーデータの受信中に発生するイベントを発行します
            </summary>
            <param name="e">受信データサイズを格納しているイベントデータ</param>
        </member>
        <member name="M:TKMP.Net.MailData.OnBodyDataReceive(TKMP.Net.DataReceiveArgs)">
            <summary>
            メールデータの受信中に発生するイベントを発行します
            </summary>
            <param name="e">受信データサイズを格納しているイベントデータ</param>
        </member>
        <member name="M:TKMP.Net.MailData.OnHeaderLoaded(TKMP.Net.DataLoadedArgs)">
            <summary>
            非同期実行のヘッダー読み出しが終了したときのイベントを発行します
            </summary>
            <param name="e">イベントデータ</param>
        </member>
        <member name="M:TKMP.Net.MailData.OnBodyLoaded(System.EventArgs)">
            <summary>
            非同期実行のメールデータ読み出しが終了したときのイベントを発行します
            </summary>
            <param name="e">イベントデータ</param>
        </member>
        <member name="F:TKMP.Net.MailData._ID">
            <summary>
            受信処理用のＩＤ
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData._UID">
            <summary>
            メールのユニークＩＤ
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData._Length">
            <summary>
            メールのサイズ
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData._HeaderLoadedLength">
            <summary>
            読み込み済みのヘッダーデータのバイト数
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData._BodyLoadedLength">
            <summary>
            読み込み済みのメールデータのバイト数
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData._BodyData">
            <summary>
            受信データを格納しているストリーム
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData._HeaderData">
            <summary>
            ヘッダーデータを格納しているストリーム
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData._PopClient">
            <summary>
            このデータの親にあたるクライアントクラス
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData._ThreadLockObject">
            <summary>
            スレッドの同期オブジェクト
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData._EventInvokeCall">
            <summary>
            trueでイベントが別スレッドで発行される
            </summary>
        </member>
        <member name="M:TKMP.Net.MailData.#ctor(System.Int32,System.String,System.Int32,TKMP.Net.PopClient)">
            <summary>
            コンストラクタ
            </summary>
            <param name="ID">識別ＩＤ</param>
            <param name="UID">ユニークＩＤ</param>
            <param name="Length">メールサイズ</param>
            <param name="ParentClient">親のクライアントクラス</param>
        </member>
        <member name="M:TKMP.Net.MailData.ReadBody">
            <summary>
            メール本文の読み出しを行います
            </summary>
            <returns>データの読み出し完了でtrueを返す</returns>
            <remarks>
            <para>メールデータの読み出しを同期実行します。途中経過を表示する場合は<see cref="E:TKMP.Net.MailData.BodyDataReceive">BodyDataReceiveイベント</see>を利用してください。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.MailData.ReadBodyAnsync">
            <summary>
            メール本文の読み出しを非同期で行います
            </summary>
            <returns>非同期読み出し開始でtrue</returns>
            <remarks>
            <para>メールのヘッダー部分のみの読み出しを非同期実行します。</para>
            <para>途中経過を表示する場合は<see cref="E:TKMP.Net.MailData.BodyDataReceive">BodyDataReceiveイベント</see>を利用してください。</para>
            <para>受信の終了は<see cref="E:TKMP.Net.MailData.BodyLoaded">BodyLoadedイベント</see>を利用してください。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.MailData.ReadHeader">
            <summary>
            メールのヘッダー部分のみの読み出しを行います
            </summary>
            <returns>データの読み出し完了でtrueを返す</returns>
            <remarks>
            <para>メールのヘッダー部分のみの読み出しを同期実行します。途中経過を表示する場合は<see cref="E:TKMP.Net.MailData.HeaderDataReceive">HeaderDataReceiveイベント</see>を利用してください。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.MailData.ReadHeaderAnsync">
            <summary>
            メールのヘッダー部分のみの読み出しを非同期で行います
            </summary>
            <returns>非同期読み出し開始でtrue</returns>
            <remarks>
            <para>メールのヘッダー部分のみの読み出しを非同期実行します。</para>
            <para>途中経過を表示する場合は<see cref="E:TKMP.Net.MailData.HeaderDataReceive">HeaderDataReceiveイベント</see>を利用してください。</para>
            <para>受信の終了は<see cref="E:TKMP.Net.MailData.HeaderLoaded">HeaderLoadedイベント</see>を利用してください。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.MailData.SyncCommand(TKMP.Common.CommandBase)">
            <summary>
            同期実行の終了を待つ
            </summary>
        </member>
        <member name="M:TKMP.Net.MailData.Delete">
            <summary>
            このメールをメールボックスから削除します
            </summary>
            <returns>削除を行ったときにtrueを返す</returns>
            <remarks>
            <para>親となる<see cref="T:TKMP.Net.PopClient"> PopClientクラス</see>の接続が確立している間のみ実行可能です。</para>
            <para>このメソッドを実行後、サーバーへは削除コマンドを即発行しますが、実際にメールボックスから削除されるのは切断処理後になります。</para>
            <para>メソッドの処理はサーバーへの削除コマンドの送信だけで、このインスタンス自体は削除されません。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.MailData.DeleteAnsync">
            <summary>
            メールの削除を非同期で実行します
            </summary>
            <returns>コマンドを送信するとtrueを返す</returns>
            <remarks>
            <para>親となる<see cref="T:TKMP.Net.PopClient"> PopClientクラス</see>の接続が確立している間のみ実行可能です。</para>
            <para>このメソッドを実行すると、サーバーへは削除コマンドを即発行しますが、実際にメールボックスから削除されるのは切断処理後になります。</para>
            <para>メソッドの処理はサーバーへの削除コマンドの送信だけで、このインスタンス自体は削除されません。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.MailData._Connection_HeaderDataReceive(System.Object,TKMP.Net.DataReceiveArgs)">
            <summary>
            ヘッダーデータ受信中のイベント処理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.MailData._Connection_BodyDataReceive(System.Object,TKMP.Net.DataReceiveArgs)">
            <summary>
            メールデータ受信中のイベント処理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.MailData.HeaderRead_DataLoaded(System.Object,System.EventArgs)">
            <summary>
            ヘッダーデータの受信完了イベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.MailData.BodyRead_DataLoaded(System.Object,System.EventArgs)">
            <summary>
            本文の受信完了イベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:TKMP.Net.MailData.HeaderDataReceive">
            <summary>
            ヘッダーデータの受信中に発生するイベント
            </summary>
            <remarks>
            <para>受信バッファにあるデータを処理するごとに発生します。このイベントの処理に時間がかかると通信速度に影響が出ます。</para>
            </remarks>
        </member>
        <member name="E:TKMP.Net.MailData.BodyDataReceive">
            <summary>
            メールデータの受信中に発生するイベント
            </summary>
            <remarks>
            <para>受信バッファにあるデータを処理するごとに発生します。このイベントの処理に時間がかかると通信速度に影響が出ます。</para>
            </remarks>
        </member>
        <member name="E:TKMP.Net.MailData.HeaderLoaded">
            <summary>
            非同期実行のヘッダー読み出しが終了したときのイベント
            </summary>
        </member>
        <member name="E:TKMP.Net.MailData.BodyLoaded">
            <summary>
            非同期実行のメールデータ読み出しが終了したときのイベント
            </summary>
        </member>
        <member name="P:TKMP.Net.MailData.UID">
            <summary>
            メールのユニークＩＤの読み出しを行います
            </summary>
            <remarks>
            <para>メールサーバーがセットしたメールのユニークＩＤを返します。</para>
            <para>このプロパティはインスタンス作成時から有効な値がセットされています。</para>
            <para>この値は各メールデータ毎にユニークであることをサーバーが保証しているので、既読メールの識別にはこの値を使用してください。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.MailData.Length">
            <summary>
            メールのサイズの読み出しを行います
            </summary>
            <remarks>
            <para>メールデータのヘッダ部分を含めたバイトサイズを返します。</para>
            <para>このプロパティはインスタンス作成時から有効な値がセットされています。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.MailData.HeaderLoadedLength">
            <summary>
            読込み済みのヘッダーデータのバイト数を返します
            </summary>
            <remarks>
            <para>受信中のヘッダーデータの読み込み済みバイト数を返します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.MailData.BodyLoadedLength">
            <summary>
            読込み済みのメールデータのバイト数を返します
            </summary>
            <remarks>
            <para>受信中のメールデータの読み込み済みバイト数を返します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.MailData.DataStream">
            <summary>
            メールデータを格納しているストリームの読み出しを行います
            </summary>
            <remarks>
            <para>ストリームを読み出すには事前に<see cref="M:TKMP.Net.MailData.ReadBody">ReadBodyメソッド</see>を実行する必要があります。</para>
            <para>未取得時にはこのプロパティはnullを返します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.MailData.HeaderStream">
            <summary>
            ヘッダーデータを格納しているストリームの読み出しを行います
            </summary>
            <remarks>
            <para>ストリームを読み出すには事前に<see cref="M:TKMP.Net.MailData.ReadHeader">ReadHeaderメソッド</see>又は、<see cref="M:TKMP.Net.MailData.ReadBody">ReadBodyメソッド</see>を実行する必要があります。</para>
            <para>未取得時にはこのプロパティはnullを返します。</para>
            </remarks>
        </member>
        <member name="T:TKMP.Imap.Command.SELECT">
            <summary>
            SELECTコマンドを発行する
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.SELECT._MailBox">
            <summary>
            選択するメールボックス名
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.SELECT._CurrentMailbox">
            <summary>
            現在選択されているメールボックスの情報
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.SELECT.AutoSelect">
            <summary>
            カレントの変更が必要なときのみコマンドを実行する
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.SELECT.#ctor(TKMP.Imap.CurrentMailbox,TKMP.Net.Mailbox)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.SELECT.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.RENAME">
            <summary>
            RENAMEコマンドを発行する
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.RENAME._Mailbox">
            <summary>
            登録するフラグの一覧
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.RENAME._NewName">
            <summary>
            変更する名称
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.RENAME.#ctor(TKMP.Net.Mailbox,System.String)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.RENAME.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Common.CommandQueue">
            <summary>
            同期処理のための通信メッセージキュー
            </summary>
        </member>
        <member name="F:TKMP.Common.CommandQueue._Queue">
            <summary>
            通信要求のキューリスト
            </summary>
        </member>
        <member name="M:TKMP.Common.CommandQueue.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Common.CommandQueue.ClearBackgroundCommand">
            <summary>
            非同期指定のコマンドを削除します
            </summary>
        </member>
        <member name="M:TKMP.Common.CommandQueue.Enqueue(TKMP.Common.CommandBase)">
            <summary>
            キューを追加します
            </summary>
            <param name="MessageData"></param>
        </member>
        <member name="M:TKMP.Common.CommandQueue.Dequeue">
            <summary>
            先頭のキューを返す
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Common.CommandQueue.Count">
            <summary>
            現在のキューの数を読み出す
            </summary>
        </member>
        <member name="T:TKMP.Writer.TextPart">
            <summary>
            テキスト情報を格納できるパートクラス
            </summary>
        </member>
        <member name="T:TKMP.Writer.IPart">
            <summary>
            メール本文のパート情報を格納するクラスのインターフェイス
            </summary>
        </member>
        <member name="M:TKMP.Writer.IPart.GetBodyStream">
            <summary>
            本文のデータストリームの読出しを行います
            </summary>
            <returns>送信用の文字列を格納したストリーム</returns>
        </member>
        <member name="P:TKMP.Writer.IPart.Headers">
            <summary>
            パート固有のヘッダ情報を格納するコレクションの読出しを行います
            </summary>
        </member>
        <member name="F:TKMP.Writer.TextPart._MainText">
            <summary>
            本文のテキスト情報
            </summary>
        </member>
        <member name="F:TKMP.Writer.TextPart._Charset">
            <summary>
            本文のキャラクタセット
            </summary>
        </member>
        <member name="F:TKMP.Writer.TextPart._FileTransfer">
            <summary>
            本文のエンコード名
            </summary>
        </member>
        <member name="F:TKMP.Writer.TextPart._ContentTransferEncoding">
            <summary>
            本文のエンコード方法
            </summary>
        </member>
        <member name="F:TKMP.Writer.TextPart._Headers">
            <summary>
            ヘッダ情報の一覧
            </summary>
        </member>
        <member name="M:TKMP.Writer.TextPart.#ctor">
            <summary>
            テキスト情報を格納できるパートクラスの新しいインスタンスを作成します
            </summary>
        </member>
        <member name="M:TKMP.Writer.TextPart.#ctor(System.String)">
            <summary>
            テキスト情報を格納できるパートクラスの新しいインスタンスを作成します
            </summary>
            <param name="Text">メール本文を示す文字列</param>
        </member>
        <member name="M:TKMP.Writer.TextPart.#ctor(System.String,TKMP.Writer.Charsets)">
            <summary>
            テキスト情報を格納できるパートクラスの新しいインスタンスを作成します
            </summary>
            <param name="Text">メール本文を示す文字列</param>
            <param name="Charset">メール本文をエンコードするときに使用する文字コード</param>
        </member>
        <member name="M:TKMP.Writer.TextPart.#ctor(System.String,TKMP.Writer.Charsets,TKMP.Writer.ContentTransferEncodings)">
            <summary>
            テキスト情報を格納できるパートクラスの新しいインスタンスを作成します
            </summary>
            <param name="Text">メール本文を示す文字列</param>
            <param name="Charset">メール本文をエンコードするときに使用する文字コード</param>
            <param name="ContentTransferEncoding">メール本文のエンコード方法</param>
        </member>
        <member name="M:TKMP.Writer.TextPart.GetBodyStream">
            <summary>
            本文のデータストリームの読出しを行います
            </summary>
            <returns>送信用の文字列を格納したストリーム</returns>
        </member>
        <member name="M:TKMP.Writer.TextPart.GetRecommendedTransfer(TKMP.Writer.Charsets)">
            <summary>
            指定した文字コードで推奨されるエンコードクラスを返す
            </summary>
            <param name="charset"></param>
            <returns></returns>
        </member>
        <member name="P:TKMP.Writer.TextPart.ContentTransferEncoding">
            <summary>
            本文のエンコード方法の設定と読み出しを行います
            </summary>
            <para>ContentTransferEncodings.Autoを設定するとCharsetの値に応じて適切なエンコード方法が選択されます</para>
        </member>
        <member name="P:TKMP.Writer.TextPart.Headers">
            <summary>
            パート固有のヘッダ情報を格納するコレクションの読出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Writer.TextPart.MainText">
            <summary>
            テキスト情報の読出しと設定を行います
            </summary>
        </member>
        <member name="P:TKMP.Writer.TextPart.Charset">
            <summary>
            本文のキャラクタセットの読出しと設定を行います
            </summary>
        </member>
        <member name="T:TKMP.Writer.IMailWriter">
            <summary>
            送信用のメールデータを作成するクラスのインターフェイス
            </summary>
        </member>
        <member name="M:TKMP.Writer.IMailWriter.GetData">
            <summary>
            送信用のデータストリームの読出しを行います
            </summary>
            <returns>メールデータを格納したストリームクラス</returns>
        </member>
        <member name="P:TKMP.Writer.IMailWriter.FromAddress">
            <summary>
            差出人アドレスの読出しと設定を行います
            </summary>
            <remarks>
            <para>この一覧はSMTPのエンベロープで使用する、実際のメールの差出人です。</para>
            <para>この情報はメールヘッダーには使用されません。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Writer.IMailWriter.ToAddressList">
            <summary>
            あて先アドレス一覧のコレクションを読出します
            </summary>
            <remarks>
            <para>この一覧はSMTPのエンベロープで使用する、実際のメールの送信先です。</para>
            <para>この情報はメールヘッダーには使用されません。</para>
            </remarks>
        </member>
        <member name="T:TKMP.Smtp.Command.ResponseNumbers">
            <summary>
            サーバーからのレスポンスコード一覧
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.ResponseNumbers.Code_250">
            <summary>
            正常に送信できた事を示すコード
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.ResponseNumbers.Code_251">
             <summary>
            受信者がローカルユーザーでないが送信は行う事を示すコード
             </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.ResponseNumbers.Code_252">
             <summary>
            VRFYコマンド利用不可を示すコード
             </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.ResponseNumbers.Code_253">
             <summary>
            OK, ノードxにn個あるメッセージが残っているので開始するコード
             </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.ResponseNumbers.Code_354">
            <summary>
            本文の送信が可能な事を示すコード
            </summary>
        </member>
        <member name="T:TKMP.Reader.FileCollection">
            <summary>
            添付ファイル格納専用コレクションクラス
            </summary>
        </member>
        <member name="M:TKMP.Reader.FileCollection.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Reader.FileCollection.Add(TKMP.Reader.File)">
            <summary>
            ファイルクラスの追加
            </summary>
            <param name="FileData">ファイルクラス</param>
        </member>
        <member name="M:TKMP.Reader.FileCollection.AddRange(TKMP.Reader.FileCollection)">
            <summary>
            ファイルクラスを一括追加します
            </summary>
            <param name="Files">ファイルコレクション</param>
        </member>
        <member name="P:TKMP.Reader.FileCollection.Item(System.Int32)">
            <summary>
            格納している添付ファイルクラスをインディックス指定で読み出します
            </summary>
        </member>
        <member name="T:TKMP.Net.MessageTypes">
            <summary>
            通信ログの種類を示す列挙
            </summary>
        </member>
        <member name="F:TKMP.Net.MessageTypes.Send">
            <summary>
            送信メッセージ
            </summary>
        </member>
        <member name="F:TKMP.Net.MessageTypes.Receive">
            <summary>
            受信メッセージ
            </summary>
        </member>
        <member name="T:TKMP.Net.MessageArgs">
            <summary>
            通信時のメッセージイベントデータ
            </summary>
        </member>
        <member name="F:TKMP.Net.MessageArgs.Message">
            <summary>
            送信または受信メッセージ
            </summary>
        </member>
        <member name="F:TKMP.Net.MessageArgs.Type">
            <summary>
            通信ログの種類
            </summary>
        </member>
        <member name="F:TKMP.Net.MessageArgs.Date">
            <summary>
            ログの記録時刻
            </summary>
        </member>
        <member name="M:TKMP.Net.MessageArgs.#ctor(System.String,TKMP.Net.MessageTypes)">
            <summary>
            インスタンスの初期化
            </summary>
            <param name="Message">送信または受信メッセージ</param>
            <param name="Type">通信ログの種類</param>
        </member>
        <member name="T:TKMP.Net.MessageReceiveHandler">
            <summary>
            データ受信直後のイベントハンドラ
            </summary>
        </member>
        <member name="T:TKMP.Net.MessageSendHandler">
            <summary>
            データ送信直後のイベントハンドラ
            </summary>
        </member>
        <member name="T:TKMP.Net.DataReceiveArgs">
            <summary>
            データ受信中に発生するイベントデータ
            </summary>
        </member>
        <member name="F:TKMP.Net.DataReceiveArgs.ReadLength">
            <summary>
            受信済みデータサイズ
            </summary>
        </member>
        <member name="M:TKMP.Net.DataReceiveArgs.#ctor(System.Int32)">
            <summary>
            インスタンスの初期化
            </summary>
            <param name="ReadLength">受信データサイズ</param>
        </member>
        <member name="T:TKMP.Net.DataReceiveHandler">
            <summary>
            データ受信中に発生するイベントハンドラ
            </summary>
        </member>
        <member name="T:TKMP.Net.DataLoadedArgs">
            <summary>
            非同期実行の読み出しが終了したときのイベントデータ
            </summary>
        </member>
        <member name="F:TKMP.Net.DataLoadedArgs.Error">
            <summary>
            読み出しが正常に終了しなかった時にtrue
            </summary>
        </member>
        <member name="M:TKMP.Net.DataLoadedArgs.#ctor(System.Boolean)">
            <summary>
            イベントデータの初期化を行います
            </summary>
            <param name="Error">読み出しが正常に終了しなかった時にtrue</param>
        </member>
        <member name="T:TKMP.Net.DataLoadedHandler">
            <summary>
            非同期実行の読み出しが終了したときのイベントハンドラ
            </summary>
        </member>
        <member name="T:TKMP.Net.DataForwardArgs">
            <summary>
            データを送受信している時に発生するイベントのデータ型
            </summary>
        </member>
        <member name="F:TKMP.Net.DataForwardArgs.DataLength">
            <summary>
            送受信を行ったデータサイズ
            </summary>
        </member>
        <member name="F:TKMP.Net.DataForwardArgs.TotalLength">
            <summary>
            送受信するデータのサイズ
            </summary>
        </member>
        <member name="M:TKMP.Net.DataForwardArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            インスタンスの初期化を行います
            </summary>
            <param name="DataLength">送受信を行ったデータサイズ</param>
            <param name="TotalLength">送受信するデータのサイズ</param>
        </member>
        <member name="T:TKMP.Net.DataForwardHandler">
            <summary>
            データを送受信している時に発生するイベントハンドラ
            </summary>
        </member>
        <member name="T:TKMP.Net.CertificateValidationHandler">
            <summary>
            暗号化通信を行う場合に正当性が認められなかった証明書の検証を行うためのイベントハンドラ
            </summary>
        </member>
        <member name="T:TKMP.Net.CertificateValidationArgs">
            <summary>
            暗号化通信を行う場合に正当性が認められなかった証明書の検証を行うためのイベントデータ
            </summary>
        </member>
        <member name="F:TKMP.Net.CertificateValidationArgs.Cancel">
            <summary>
            証明書の検証をキャンセルします。
            </summary>
            <remarks>
            <para>証明書の内容をで認証を行う場合にfalseをセットします。</para>
            <para>証明書の内容に問題がある場合はtrueをセットし検証を中断することが出来ます。</para>
            </remarks>
        </member>
        <member name="F:TKMP.Net.CertificateValidationArgs.Certificate">
            <summary>
            X.509 v.3 証明書を使用するために役立つメソッドを提供します。
            </summary>
        </member>
        <member name="F:TKMP.Net.CertificateValidationArgs.Chain">
            <summary>
            System.Security.Cryptography.X509Certificates.X509Certificate2 証明書のチェーン作成エンジンを表します。
            </summary>
        </member>
        <member name="F:TKMP.Net.CertificateValidationArgs.SslPolicyErrors">
            <summary>
            SSL (Secure Socket Layer) のポリシー エラーを列挙します。
            </summary>
        </member>
        <member name="M:TKMP.Net.CertificateValidationArgs.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            新しいインスタンスを作成します。
            </summary>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
        </member>
        <member name="T:TKMP.Net.AuthPlainImapLogon">
            <summary>
            PLAINコマンドでＩＭＡＰサーベーへ接続するときの認証方法を提供するクラス
            </summary>
        </member>
        <member name="T:TKMP.Net.IImapLogon">
            <summary>
            ＩＭＡＰサーバーへのログオン処理をするクラスのに必要なインターフェイス
            </summary>
            <remarks>
            <para>サーバーへのログオン方法が特殊な場合このインターフェイスを継承することで、独自のログオン処理を作成することが可能です。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.IImapLogon.Connection(System.String,System.String@,System.String@)">
            <summary>
            ログオン時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列が返されます（送信文字列無しの時はNull）</param>
            <param name="LogMessage">通信ログで表示する文字列が返されます。通常パスワードなど非表示としたい通信内容の場合に内容がセットされます。Sendを通信ログとする場合はNullがセットされます</param>
            <returns>ログオン処理を継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.IImapLogon.Exit(System.String,System.String@)">
            <summary>
            切断時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列（送信文字列無しの時はNull）</param>
            <returns>切断処理が継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.IImapLogon.Initialize">
            <summary>
            ログオン処理を最初からやり直すための初期化を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Net.IImapLogon.Logon">
            <summary>
            ログオンが正常に行われたことを示す値読み出します
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthPlainImapLogon._UserID">
            <summary>
            ユーザーＩＤ
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthPlainImapLogon._Password">
            <summary>
            パスワード
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthPlainImapLogon._LogonProcess">
            <summary>
            ログオン処理の識別用
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthPlainImapLogon._Logon">
            <summary>
            ログオン完了でtrue
            </summary>
        </member>
        <member name="M:TKMP.Net.AuthPlainImapLogon.#ctor(System.String,System.String)">
            <summary>
            基本的な認証方法を処理するクラスのインスタンスを初期化します
            </summary>
            <param name="UserID">ユーザーＩＤ</param>
            <param name="Password">パスワード</param>
        </member>
        <member name="M:TKMP.Net.AuthPlainImapLogon.Connection(System.String,System.String@,System.String@)">
            <summary>
            ログオン時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列（送信文字列無しの時はNull）</param>
            <param name="LogMessage">通信ログで表示する文字列が返されます。通常パスワードなど非表示としたい通信内容の場合に内容がセットされます。Sendを通信ログとする場合はNullがセットされます</param>
            <returns>ログオン処理を継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.AuthPlainImapLogon.TKMP#Net#IImapLogon#Exit(System.String,System.String@)">
            <summary>
            切断時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列（送信文字列無しの時はNull）</param>
            <returns>切断処理が継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.AuthPlainImapLogon.TKMP#Net#IImapLogon#Initialize">
            <summary>
            ログオン処理を最初からやり直すための初期化を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Net.AuthPlainImapLogon.TKMP#Net#IImapLogon#Logon">
            <summary>
            ログオンが正常に行われたことを示す値を読み出す
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.STORE_CommandBase">
            <summary>
            STOREコマンドの基本クラス
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.STORE_CommandBase._Flag">
            <summary>
            登録するフラグの一覧
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.STORE_CommandBase._UID">
            <summary>
            識別用のUID
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.STORE_CommandBase._MailBox">
            <summary>
            メールボックス
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.STORE_CommandBase._Mails">
            <summary>
            変更メールデータの一覧
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.STORE_CommandBase.#ctor(System.String[],TKMP.Net.MailData_Imap[])">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.STORE_CommandBase.GetCommand(System.String,System.String[])">
            <summary>
            発行コマンド文字列を作成する
            </summary>
            <param name="uid"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Imap.Command.STORE_CommandBase.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="P:TKMP.Imap.Command.STORE_CommandBase.Flags">
            <summary>
            変更後のフラグの一覧
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.STORE_Add">
            <summary>
            フラグを追加するためのSTOREコマンドを発行する
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.STORE_Add.#ctor(System.String[],TKMP.Net.MailData_Imap)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.STORE_Add.#ctor(System.String[],TKMP.Net.MailData_Imap[])">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.STORE_Add.GetCommand(System.String,System.String[])">
            <summary>
            発行コマンド文字列を作成する
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.STORE_Remove">
            <summary>
            フラグを削除するためのSTOREコマンドを発行する
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.STORE_Remove.#ctor(System.String[],TKMP.Net.MailData_Imap)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.STORE_Remove.#ctor(System.String[],TKMP.Net.MailData_Imap[])">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.STORE_Remove.GetCommand(System.String,System.String[])">
            <summary>
            発行コマンド文字列を作成する
            </summary>
        </member>
        <member name="T:TKMP.Net.SearchKey.OR">
            <summary>
            IMAPプロトコルの複数の条件のOR検索を行うためのクラス
            </summary>
        </member>
        <member name="M:TKMP.Net.SearchKey.OR.#ctor(TKMP.Net.SearchKeyBase,TKMP.Net.SearchKeyBase)">
            <summary>
            新しいインスタンスを作成します
            </summary>
            <param name="search1">検索条件1</param>
            <param name="search2">検索条件2</param>
        </member>
        <member name="M:TKMP.Net.SearchKey.OR.GetSendData(TKMP.Net.SearchKeyBase.GetCommandMethod)">
            <summary>
            SEARCHコマンドで使用するコマンド文字列を読み出します。
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Net.SearchKey.OR.Search1">
            <summary>
            条件１
            </summary>
        </member>
        <member name="P:TKMP.Net.SearchKey.OR.Search2">
            <summary>
            条件２
            </summary>
        </member>
        <member name="T:TKMP.Net.IClient">
            <summary>
            サーバーへの接続を行うクライアントのインターフェイスを定義します。
            </summary>
        </member>
        <member name="M:TKMP.Net.IClient.Connect">
            <summary>
            接続を開始します
            </summary>
            <returns>接続が正常に行えるとtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.IClient.Close">
            <summary>
            通信の切断処理を行います
            </summary>
        </member>
        <member name="E:TKMP.Net.IClient.MessageReceive">
            <summary>
            データ受信直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Net.IClient.MessageSend">
            <summary>
            データ送信直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Net.IClient.CertificateValidation">
            <summary>
            暗号化通信を行う場合に正当性が認められなかった証明書の検証を行うときのイベント
            </summary>
        </member>
        <member name="P:TKMP.Net.IClient.MessageLog">
            <summary>
            メッセージのログを記録するクラスの読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.IClient.TimeOutInterval">
            <summary>
            送受信がタイムアウトする時間（秒単位）の設定と読み出しを行います
            </summary>
            <remarks>
            <para>送信に対する受信待ちの時間を設定します</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.IClient.AuthenticationProtocol">
            <summary>
            通信で使用する暗号化の方法の読み出しと設定を行います
            </summary>
        </member>
        <member name="P:TKMP.Net.IClient.IsEncrypted">
            <summary>
            現在の通信が暗号化されていることを示す値の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.IClient.Connected">
            <summary>
            通信が確立している事を表す値を読み出します
            </summary>
            <remarks>
            <para>Connectメソッドの実行後に正常にログオン作業が終了するとtrueを返します</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.IClient.HostName">
            <summary>
            接続先のホスト名の読み出を行います
            </summary>
        </member>
        <member name="T:TKMP.Net.MailFlags">
            <summary>
            メールデータのフラグメッセージ属性の列挙
            </summary>
        </member>
        <member name="F:TKMP.Net.MailFlags.none">
            <summary>
            フラグを持たない事を示します
            </summary>
        </member>
        <member name="F:TKMP.Net.MailFlags.Seen">
            <summary>
            メッセージが読まれている事を示します
            </summary>
        </member>
        <member name="F:TKMP.Net.MailFlags.Answered">
            <summary>
            メッセージが返信されている事を示します
            </summary>
        </member>
        <member name="F:TKMP.Net.MailFlags.Flagged">
            <summary>
            メッセージは緊急/特別な注意が必要である事を示します
            </summary>
        </member>
        <member name="F:TKMP.Net.MailFlags.Deleted">
            <summary>
            メッセージは削除される事を示します
            </summary>
        </member>
        <member name="F:TKMP.Net.MailFlags.Draft">
            <summary>
            メッセージは完成された文章ではない事を示します
            </summary>
        </member>
        <member name="F:TKMP.Net.MailFlags.Recent">
            <summary>
            メッセージは最近このメールボックスに到着した事を示します
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.CLOSE">
            <summary>
            CLOSEコマンドを発行する
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.CLOSE.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.CLOSE.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Imap.CommandNumber">
            <summary>
            発行コマンドの番号管理をするクラス
            </summary>
        </member>
        <member name="F:TKMP.Imap.CommandNumber._CommandSerialNumber">
            <summary>
            コマンド発行番号
            </summary>
        </member>
        <member name="M:TKMP.Imap.CommandNumber.GetNumber">
            <summary>
            発行用の番号を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="T:TKMP.Reader.MailStream">
            <summary>
            メールソースのストリームを処理するクラス
            </summary>
        </member>
        <member name="F:TKMP.Reader.MailStream._BaseStream">
            <summary>
            処理対象のストリームクラス
            </summary>
        </member>
        <member name="F:TKMP.Reader.MailStream._LastSeparator">
            <summary>
            最後に一致したセパレーター
            </summary>
        </member>
        <member name="M:TKMP.Reader.MailStream.#ctor(System.IO.Stream)">
            <summary>
            コンストラクタ
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:TKMP.Reader.MailStream.GetHeader">
            <summary>
            ストリームのヘッダ部分を取り出す
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKMP.Reader.MailStream.GetPartData(System.Byte[])">
            <summary>
            パート情報を取り出す
            </summary>
            <param name="Separator"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Reader.MailStream.StreamReadBytes(System.Byte[],System.Boolean)">
            <summary>
            ストリームの切り取りを行う
            </summary>
            <param name="EndCode"></param>
            <param name="FullMatch"></param>
            <returns></returns>
        </member>
        <member name="P:TKMP.Reader.MailStream.CanReadPart">
            <summary>
            次のマルチパートが読み出し可能なことを示す値
            </summary>
        </member>
        <member name="T:TKMP.Reader.Encoding">
            <summary>
            文字列のエンコードクラス
            </summary>
        </member>
        <member name="M:TKMP.Reader.Encoding.GetEncoding(System.String,System.Byte[])">
            <summary>
            指定されたキャラクターセットでデコードを行います
            </summary>
            <param name="EncodingName">エンコーディングの名称</param>
            <param name="ByteString">変換するバイト配列</param>
            <returns>変換した文字列</returns>
        </member>
        <member name="M:TKMP.Reader.Encoding.GetEncoding(System.String,System.Byte[],System.String)">
            <summary>
            指定されたキャラクターセットでデコードを行います
            </summary>
            <param name="EncodingName">エンコーディングの名称</param>
            <param name="ByteString">変換するバイト配列</param>
            <param name="BaseString">変換に失敗した時の文字列</param>
            <returns>変換した文字列</returns>
        </member>
        <member name="M:TKMP.Reader.Encoding.EncodingCharCode(System.String)">
            <summary>
            .NETで使用するエンコード名称を取得する
            </summary>
            <param name="EncodingName"></param>
            <returns></returns>
        </member>
        <member name="T:TKMP.Pop.Command.DELE">
            <summary>
            メールの削除コマンドを発行します
            </summary>
        </member>
        <member name="F:TKMP.Pop.Command.DELE._ID">
            <summary>
            メール識別用のＩＤ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.DELE.#ctor(System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.DELE.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Pop.Command.CommandDataReadBase">
            <summary>
            CommandDataReadBase の概要の説明です。
            </summary>
        </member>
        <member name="F:TKMP.Pop.Command.CommandDataReadBase._ReceiveBlockSize">
            <summary>
            受信バッファの最大サイズ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.CommandDataReadBase.OnDataReceive(TKMP.Net.DataReceiveArgs)">
            <summary>
            データ受信中に発生するイベントを発行します
            </summary>
            <param name="e">受信データサイズを格納しているイベントデータ</param>
        </member>
        <member name="M:TKMP.Pop.Command.CommandDataReadBase.OnDataLoaded(System.EventArgs)">
            <summary>
            データの受信完了イベントを発生します
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:TKMP.Pop.Command.CommandDataReadBase._ID">
            <summary>
            メール識別用のＩＤ
            </summary>
        </member>
        <member name="F:TKMP.Pop.Command.CommandDataReadBase._DataLength">
            <summary>
            メールのサイズ
            </summary>
        </member>
        <member name="F:TKMP.Pop.Command.CommandDataReadBase._ResData">
            <summary>
            データを格納しているストリーム
            </summary>
        </member>
        <member name="F:TKMP.Pop.Command.CommandDataReadBase._ReadLength">
            <summary>
            読み込み済みのデータサイズ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.CommandDataReadBase.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="IsBackground"></param>
            <param name="ID"></param>
            <param name="DataLength"></param>
        </member>
        <member name="M:TKMP.Pop.Command.CommandDataReadBase.MailDownLoad">
            <summary>
            メールの本文を受信します
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKMP.Pop.Command.CommandDataReadBase.ReceiveBuffer(System.Net.Sockets.Socket)">
            <summary>
            受信バッファからの格納処理
            </summary>
            <returns></returns>
        </member>
        <member name="E:TKMP.Pop.Command.CommandDataReadBase.DataReceive">
            <summary>
            データ受信中に発生するイベント
            </summary>
            <remarks>
            <para>受信バッファにあるデータを処理するごとに発生します。このイベントの処理に時間がかかると通信速度に影響が出ます。</para>
            </remarks>
        </member>
        <member name="E:TKMP.Pop.Command.CommandDataReadBase.DataLoaded">
            <summary>
            データの受信完了イベント
            </summary>
        </member>
        <member name="P:TKMP.Pop.Command.CommandDataReadBase.ReadLength">
            <summary>
            読み込み済みのデータサイズの読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Pop.Command.CommandDataReadBase.Data">
            <summary>
            読み込み済みデータの読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Net.AuthCramMd5ImapLogon">
            <summary>
            CRAM-MD5コマンドでＩＭＡＰサーベーへ接続するときの認証方法を提供するクラス
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthCramMd5ImapLogon._UserID">
            <summary>
            ユーザーＩＤ
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthCramMd5ImapLogon._Password">
            <summary>
            パスワード
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthCramMd5ImapLogon._LogonProcess">
            <summary>
            ログオン処理の識別用
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthCramMd5ImapLogon._Logon">
            <summary>
            ログオン完了でtrue
            </summary>
        </member>
        <member name="M:TKMP.Net.AuthCramMd5ImapLogon.#ctor(System.String,System.String)">
            <summary>
            基本的な認証方法を処理するクラスのインスタンスを初期化します
            </summary>
            <param name="UserID">ユーザーＩＤ</param>
            <param name="Password">パスワード</param>
        </member>
        <member name="M:TKMP.Net.AuthCramMd5ImapLogon.Connection(System.String,System.String@,System.String@)">
            <summary>
            ログオン時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列（送信文字列無しの時はNull）</param>
            <param name="LogMessage">通信ログで表示する文字列が返されます。通常パスワードなど非表示としたい通信内容の場合に内容がセットされます。Sendを通信ログとする場合はNullがセットされます</param>
            <returns>ログオン処理を継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.AuthCramMd5ImapLogon.TKMP#Net#IImapLogon#Exit(System.String,System.String@)">
            <summary>
            切断時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列（送信文字列無しの時はNull）</param>
            <returns>切断処理が継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.AuthCramMd5ImapLogon.TKMP#Net#IImapLogon#Initialize">
            <summary>
            ログオン処理を最初からやり直すための初期化を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Net.AuthCramMd5ImapLogon.TKMP#Net#IImapLogon#Logon">
            <summary>
            ログオンが正常に行われたことを示す値を読み出す
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.STARTTLS">
            <summary>
            STARTTLSコマンドを発行する
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.STARTTLS.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.STARTTLS.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="P:TKMP.Imap.Command.STARTTLS.AuthList">
            <summary>
            利用可能な認証方式の一覧
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.FETCH_UID">
            <summary>
            FETCHコマンドを発行する
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.FETCH_UID.#ctor(System.Int32,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.FETCH_UID.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="P:TKMP.Imap.Command.FETCH_UID.UID">
            <summary>
            UIDの一覧
            </summary>
        </member>
        <member name="P:TKMP.Imap.Command.FETCH_UID.Size">
            <summary>
            メールサイズの一覧
            </summary>
        </member>
        <member name="P:TKMP.Imap.Command.FETCH_UID.Flags">
            <summary>
            メールフラグ
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.Command_Login">
            <summary>
            ログイン処理を実行します
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.Command_Login._ConnectionResponse">
            <summary>
            接続時にサーバーが返してきた文字列
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.Command_Login._ImapLogon">
            <summary>
            ログオン処理クラス
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.Command_Login.#ctor(TKMP.Net.IImapLogon,System.String)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.Command_Login.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.LSUB">
            <summary>
            LSUBコマンドを発行する
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.LSUB.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.LSUB.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="P:TKMP.Imap.Command.LSUB.FolderListString">
            <summary>
            取得したフォルダ一覧の読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Writer.MultiPart">
            <summary>
            複数のパート情報を格納できるマルチパートクラス
            </summary>
        </member>
        <member name="F:TKMP.Writer.MultiPart._BoundaryRandomBase">
            <summary>
            Boundaryの乱数作成共通クラス
            </summary>
        </member>
        <member name="F:TKMP.Writer.MultiPart._Boundary">
            <summary>
            セパレータの文字列
            </summary>
        </member>
        <member name="F:TKMP.Writer.MultiPart._Headers">
            <summary>
            ヘッダ情報の一覧
            </summary>
        </member>
        <member name="M:TKMP.Writer.MultiPart.#cctor">
            <summary>
            静的コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Writer.MultiPart.#ctor">
            <summary>
            複数のパート情報を格納できるマルチパートクラスの新しいインスタンスを作成します
            </summary>
        </member>
        <member name="M:TKMP.Writer.MultiPart.#ctor(TKMP.Writer.IPart[])">
            <summary>
            複数のパート情報を格納できるマルチパートクラスの新しいインスタンスを作成します
            </summary>
            <param name="parts">マルチパートに追加するためのサブパートクラス</param>
        </member>
        <member name="M:TKMP.Writer.MultiPart.AddPart(TKMP.Writer.IPart)">
            <summary>
            マルチパートに新しいパートを追加する
            </summary>
            <param name="part">マルチパートに追加するためのサブパートクラス</param>
        </member>
        <member name="M:TKMP.Writer.MultiPart.Remove(TKMP.Writer.IPart)">
            <summary>
            マルチパート内にある特定のパートのうち、最初に出現するパートを削除します。
            </summary>
            <param name="part">削除するパートクラス</param>
        </member>
        <member name="M:TKMP.Writer.MultiPart.GetBodyStream">
            <summary>
            本文のデータストリームの読出しを行います
            </summary>
            <returns>送信用の文字列を格納したストリーム</returns>
        </member>
        <member name="M:TKMP.Writer.MultiPart.WriteBodyText(System.IO.Stream,System.IO.Stream)">
            <summary>
            本文のストリームを出力用ストリームに書き込む
            </summary>
            <param name="InputStream"></param>
            <param name="OutputStream"></param>
        </member>
        <member name="M:TKMP.Writer.MultiPart.GetBoundary">
            <summary>
            パートセパレータを作成する
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Writer.MultiPart.Headers">
            <summary>
            パート固有のヘッダ情報を格納するコレクションの読出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Writer.MultiPart.Item(System.Int32)">
            <summary>
            インディクサによるパートの読み出しを行ないます。
            </summary>
        </member>
        <member name="T:TKMP.Transfer.Transfer7bit">
            <summary>
            7bitの処理クラス
            </summary>
        </member>
        <member name="M:TKMP.Transfer.Transfer7bit.TKMP#Transfer#ITransfer#Decoding(System.Byte[])">
            <summary>
            デコード処理
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後のバイト配列</returns>
        </member>
        <member name="M:TKMP.Transfer.Transfer7bit.TKMP#Transfer#ITransfer#Encoding(System.Byte[])">
            <summary>
            エンコード処理を行います
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="M:TKMP.Transfer.Transfer7bit.TKMP#Transfer#ITransfer#BodyEncoding(System.Byte[])">
            <summary>
            本文のエンコード処理を行います。変換結果は複数行になりリターンコードが挿入されます
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="M:TKMP.Transfer.Transfer7bit.TKMP#Transfer#ITransfer#BodyEncodingByte(System.Byte[])">
            <summary>
            本文のエンコード処理を行います。変換結果は複数行になりリターンコードが挿入されます
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="P:TKMP.Transfer.Transfer7bit.TKMP#Transfer#ITransfer#EncodingName">
            <summary>
            エンコード処理の名称の読出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Net.PopBeforeSMTP">
             <summary>
            Pop Before SMTPでログオンを行うためのクラス 
             </summary>
        </member>
        <member name="F:TKMP.Net.PopBeforeSMTP._Logon">
            <summary>
            ログオン完了でtrue
            </summary>
        </member>
        <member name="F:TKMP.Net.PopBeforeSMTP._PopClient">
            <summary>
            POP接続のためのクライアントクラス
            </summary>
        </member>
        <member name="M:TKMP.Net.PopBeforeSMTP.GetIPopLogon(System.String,System.String,System.Boolean)">
            <summary>
            POP用のログオンクラスを作成する
            </summary>
            <param name="UserID"></param>
            <param name="Password"></param>
            <param name="ApopLogo"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.PopBeforeSMTP.#ctor(System.String,System.String,System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Pop Before SMTPでログオンを行うためのクラスのインスタンスを初期化します
            </summary>
            <param name="UserID">ユーザーＩＤ</param>
            <param name="Password">パスワード</param>
            <param name="Address">接続先を示すアドレス</param>
            <param name="Port">接続先サーバーのポート番号</param>
            <param name="ApopLogon">ＰＯＰサーバーへのログオンにＡＰＯＰを使用することを指定します</param>
        </member>
        <member name="M:TKMP.Net.PopBeforeSMTP.#ctor(System.String,System.String,System.Net.IPAddress,System.Int32)">
            <summary>
            Pop Before SMTPでログオンを行うためのクラスのインスタンスを初期化します
            </summary>
            <param name="UserID">ユーザーＩＤ</param>
            <param name="Password">パスワード</param>
            <param name="Address">接続先を示すアドレス</param>
            <param name="Port">接続先サーバーのポート番号</param>
        </member>
        <member name="M:TKMP.Net.PopBeforeSMTP.#ctor(TKMP.Net.IPopLogon,System.Net.IPAddress,System.Int32)">
            <summary>
            Pop Before SMTPでログオンを行うためのクラスのインスタンスを初期化します
            </summary>
            <param name="PopLogon">Popログオン処理クラス</param>
            <param name="Address">接続先を示すアドレス</param>
            <param name="Port">接続先サーバーのポート番号</param>
        </member>
        <member name="M:TKMP.Net.PopBeforeSMTP.#ctor(TKMP.Net.PopClient)">
            <summary>
            Pop Before SMTPでログオンを行うためのクラスのインスタンスを初期化します
            </summary>
            <param name="PopClient">Popサーバーへの接続を行うためのクライアントクラス</param>
        </member>
        <member name="M:TKMP.Net.PopBeforeSMTP.TKMP#Net#ISmtpLogon#Greeting(System.String)">
            <summary>
            接続の確立直後の送信メッセージをセットします。
            </summary>
            <param name="Receive">受信した文字列</param>
            <returns>送信文字列が返されます（送信文字列無しの時はNull）</returns>
        </member>
        <member name="M:TKMP.Net.PopBeforeSMTP.TKMP#Net#ISmtpLogon#Connection(System.String,System.String@,System.String@)">
            <summary>
            ログオン時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列が返されます（送信文字列無しの時はNull）</param>
            <param name="LogMessage">通信ログで表示する文字列が返されます。通常パスワードなど非表示としたい通信内容の場合に内容がセットされます。Sendを通信ログとする場合はNullがセットされます</param>
            <returns>ログオン処理を継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.PopBeforeSMTP.TKMP#Net#ISmtpLogon#Initialize">
            <summary>
            ログオン処理を最初からやり直すための初期化を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Net.PopBeforeSMTP.TKMP#Net#ISmtpLogon#Logon">
            <summary>
            ログオンが正常に行われたことを示す値読み出します
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.EXPUNGE">
            <summary>
            EXPUNGEコマンドを発行する
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.EXPUNGE.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.EXPUNGE.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Net.SearchKey.AND">
            <summary>
            IMAPプロトコルの複数の条件のAND検索を行うためのクラス
            </summary>
        </member>
        <member name="M:TKMP.Net.SearchKey.AND.#ctor(TKMP.Net.SearchKeyBase,TKMP.Net.SearchKeyBase)">
            <summary>
            新しいインスタンスを作成します
            </summary>
            <param name="search1">検索条件1</param>
            <param name="search2">検索条件2</param>
        </member>
        <member name="M:TKMP.Net.SearchKey.AND.GetSendData(TKMP.Net.SearchKeyBase.GetCommandMethod)">
            <summary>
            SEARCHコマンドで使用するコマンド文字列を読み出します。
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Net.SearchKey.AND.Search1">
            <summary>
            条件１
            </summary>
        </member>
        <member name="P:TKMP.Net.SearchKey.AND.Search2">
            <summary>
            条件２
            </summary>
        </member>
        <member name="T:TKMP.Writer.MailWriter">
            <summary>
            送信用のメールデータを作成するクラス
            </summary>
        </member>
        <member name="F:TKMP.Writer.MailWriter.DefaultEncodingName">
            <summary>
            標準の日本語エンコードタイプ
            </summary>
        </member>
        <member name="F:TKMP.Writer.MailWriter.RANDOM">
            <summary>
            MESSAGEID作成用の乱数生成クラス
            </summary>
        </member>
        <member name="F:TKMP.Writer.MailWriter._FromAddress">
            <summary>
            差出人アドレス
            </summary>
        </member>
        <member name="F:TKMP.Writer.MailWriter._ToAddressList">
            <summary>
            あて先アドレス
            </summary>
        </member>
        <member name="F:TKMP.Writer.MailWriter._Headers">
            <summary>
            ヘッダ情報の一覧
            </summary>
        </member>
        <member name="F:TKMP.Writer.MailWriter._MainPart">
            <summary>
            メインパートのクラス
            </summary>
        </member>
        <member name="F:TKMP.Writer.MailWriter._MailAddressValidate">
            <summary>
            メールアドレスの登録時に記述の検証を行うことを示す値
            </summary>
        </member>
        <member name="M:TKMP.Writer.MailWriter.#ctor">
            <summary>
            送信用のメールデータの新しいインスタンスを作成します
            </summary>
        </member>
        <member name="M:TKMP.Writer.MailWriter.GetData">
            <summary>
            送信用のデータストリームの読出しを行います
            </summary>
            <returns>メールデータを格納したストリームクラス</returns>
        </member>
        <member name="M:TKMP.Writer.MailWriter.ToArray">
            <summary>
            送信用のデータをバイト配列に書き込みます
            </summary>
            <returns>送信用メールデータのバイト配列</returns>
        </member>
        <member name="M:TKMP.Writer.MailWriter.WriteBodyText(System.IO.Stream,System.IO.Stream)">
            <summary>
            本文のストリームを出力用ストリームに書き込む
            </summary>
            <param name="InputStream"></param>
            <param name="OutputStream"></param>
        </member>
        <member name="M:TKMP.Writer.MailWriter.MakeMessageID">
            <summary>
            メッセージＩＤを作成する
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKMP.Writer.MailWriter.NowDateTimeString">
            <summary>
            現在の日時文字列を作成する
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Writer.MailWriter.MailAddressValidate">
            <summary>
            メールアドレスの登録時に記述の検証を行うことを示す値の読み出しと設定を行います
            </summary>
        </member>
        <member name="P:TKMP.Writer.MailWriter.FromAddress">
            <summary>
            差出人アドレスの読出しと設定を行います
            </summary>
            <remarks>
            <para>この一覧はSMTPのエンベロープで使用する、実際のメールの差出人です。</para>
            <para>メールのヘッダ情報にはこの情報は追加されません</para>
            </remarks>
        </member>
        <member name="P:TKMP.Writer.MailWriter.ToAddressList">
            <summary>
            あて先アドレス一覧のコレクションを読出します
            </summary>
            <remarks>
            <para>この一覧はSMTPのエンベロープで使用する、実際のメールの送信先です。</para>
            <para>メールのヘッダ情報にはこの情報は追加されません</para>
            </remarks>
        </member>
        <member name="P:TKMP.Writer.MailWriter.Headers">
            <summary>
            ヘッダー情報を格納しているコレクションを読み出します
            </summary>
        </member>
        <member name="P:TKMP.Writer.MailWriter.MainPart">
            <summary>
            メインパートクラスの読出しと設定を行います
            </summary>
        </member>
        <member name="T:TKMP.Writer.Header.HeaderString">
            <summary>
            ヘッダデータの情報を管理するクラス
            </summary>
        </member>
        <member name="F:TKMP.Writer.Header.HeaderString._Name">
            <summary>
            このヘッダの名称
            </summary>
        </member>
        <member name="F:TKMP.Writer.Header.HeaderString._NameToLower">
            <summary>
            このヘッダの名称を全て小文字にした文字列
            </summary>
        </member>
        <member name="F:TKMP.Writer.Header.HeaderString._Data">
            <summary>
            このヘッダのデータ
            </summary>
        </member>
        <member name="F:TKMP.Writer.Header.HeaderString._SourceData">
            <summary>
            このヘッダのデコード前の文字列
            </summary>
        </member>
        <member name="F:TKMP.Writer.Header.HeaderString.HeaderTransfer">
            <summary>
            ヘッダの日本語エンコード方法
            </summary>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderString.#ctor(System.String,System.String)">
            <summary>
            ヘッダのエントリーを管理するクラスの新しいインスタンスを作成します
            </summary>
            <param name="Name">ヘッダエントリの名前</param>
            <param name="Data">ヘッダエントリのデータ</param>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderString.#ctor(System.String,System.String,System.String)">
            <summary>
            ヘッダのエントリーを管理するクラスの新しいインスタンスを作成します
            </summary>
            <param name="Name">ヘッダエントリの名前</param>
            <param name="Data">ヘッダエントリのデータ</param>
            <param name="EncodeCharset">エンコードを行なう文字コード</param>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderString.SetData(System.String,System.Text.Encoding)">
            <summary>
            保持データを新しいデータに置き換える
            </summary>
            <param name="Data"></param>
            <param name="Encoding"></param>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderString.StringEncode(System.String,System.Text.Encoding)">
            <summary>
            ヘッダ用文字列をエンコードします
            </summary>
            <param name="s"></param>
            <param name="Encoding"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderString.HeaderEncode(System.String,System.Int32,System.String)">
            <summary>
            ヘッダデータのエンコード処理を行ないます。
            </summary>
            <param name="Source">エンコード前のデータ文字列</param>
            <param name="MaxLength">エンコードデータの１行の最大文字数</param>
            <param name="EncodeCharset">エンコードを行なう文字コード</param>
            <returns>エンコードされた文字列</returns>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderString.HeaderEncode(System.String,System.Int32)">
            <summary>
            ヘッダデータのエンコード処理を行ないます。
            </summary>
            <param name="Source">エンコード前のデータ文字列</param>
            <param name="MaxLength">エンコードデータの１行の最大文字数</param>
            <returns>エンコードされた文字列</returns>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderString.HeaderEncode(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            エントリデータのエンコード処理
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Writer.Header.HeaderString.NameToLower">
            <summary>
            このヘッダの名称（すべて小文字）
            </summary>
        </member>
        <member name="P:TKMP.Writer.Header.HeaderString.Name">
            <summary>
            ヘッダフィールド名称の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Writer.Header.HeaderString.Data">
            <summary>
            フィールドデータの読み出しを行います
            </summary>
            <remarks>
            <para>コンストラクタで指定したデータと同じものが返されます</para>
            </remarks>
        </member>
        <member name="P:TKMP.Writer.Header.HeaderString.EncodeData">
            <summary>
            エンコードしたフィールドデータの読み出しを行います
            </summary>
            <remarks>
            <para>文字列をエンコードした結果が返されます</para>
            </remarks>
        </member>
        <member name="P:TKMP.Writer.Header.HeaderString.EncodeString">
            <summary>
            エンコードしたヘッダフィールドの文字列
            </summary>
        </member>
        <member name="T:TKMP.Writer.Header.HeaderString.ExString">
            <summary>
            文字句ごとに処理をするためのクラス
            </summary>
        </member>
        <member name="F:TKMP.Writer.Header.HeaderString.ExString._Source">
            <summary>
            原文
            </summary>
        </member>
        <member name="F:TKMP.Writer.Header.HeaderString.ExString.JISWord">
            <summary>
            全角を含むことを示す値
            </summary>
        </member>
        <member name="F:TKMP.Writer.Header.HeaderString.ExString._Data">
            <summary>
            変換したデータ
            </summary>
        </member>
        <member name="F:TKMP.Writer.Header.HeaderString.ExString._Encoding">
            <summary>
            エンコードクラス
            </summary>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderString.ExString.#ctor(System.String,System.Text.Encoding)">
            <summary>
            コンストラクタ
            </summary>
            <param name="s"></param>
            <param name="Encoding"></param>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderString.ExString.NextJoin(TKMP.Writer.Header.HeaderString.ExString)">
            <summary>
            続く文字句と結合可能な場合にデータを統合する
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderString.ExString.CutString(System.Int32,System.Int32)">
            <summary>
            長すぎる文字句を複数のクラスに分ける
            </summary>
            <param name="MaxByte"></param>
            <param name="StartLength"></param>
            <returns></returns>
        </member>
        <member name="P:TKMP.Writer.Header.HeaderString.ExString.Source">
            <summary>
            ソースの読み出しを行う
            </summary>
        </member>
        <member name="P:TKMP.Writer.Header.HeaderString.ExString.Data">
            <summary>
            変換後のデータの読み出しを行うs
            </summary>
        </member>
        <member name="T:TKMP.Transfer.Transfer8Bit">
            <summary>
            8Bitの処理クラス
            </summary>
        </member>
        <member name="M:TKMP.Transfer.Transfer8Bit.TKMP#Transfer#ITransfer#Decoding(System.Byte[])">
            <summary>
            デコード処理
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後のバイト配列</returns>
        </member>
        <member name="M:TKMP.Transfer.Transfer8Bit.TKMP#Transfer#ITransfer#Encoding(System.Byte[])">
            <summary>
            エンコード処理を行います
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="M:TKMP.Transfer.Transfer8Bit.TKMP#Transfer#ITransfer#BodyEncoding(System.Byte[])">
            <summary>
            本文のエンコード処理を行います。変換結果は複数行になりリターンコードが挿入されます
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="M:TKMP.Transfer.Transfer8Bit.TKMP#Transfer#ITransfer#BodyEncodingByte(System.Byte[])">
            <summary>
            本文のエンコード処理を行います。変換結果は複数行になりリターンコードが挿入されます
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="P:TKMP.Transfer.Transfer8Bit.TKMP#Transfer#ITransfer#EncodingName">
            <summary>
            エンコード処理の名称の読出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Smtp.Command.Command_Connect">
            <summary>
            接続時の処理をするコマンド
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Connect._ConnectionString">
            <summary>
            接続時のサーバーメッセージ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.Command_Connect.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.Command_Connect.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="P:TKMP.Smtp.Command.Command_Connect.ConnectionString">
            <summary>
            接続時のサーバーメッセージの読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Net.MailData_Imap">
            <summary>
            IMAP接続用のメールの情報クラス
            </summary>
            <remarks>
            <para>メール単位での操作を行うためのクラスです。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.OnBodyDataReceive(TKMP.Net.DataReceiveArgs)">
            <summary>
            メールデータの受信中に発生するイベントを発行します
            </summary>
            <param name="e">受信データサイズを格納しているイベントデータ</param>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.OnHeaderDataReceive(TKMP.Net.DataReceiveArgs)">
            <summary>
            ヘッダーデータの受信中に発生するイベントを発行します
            </summary>
            <param name="e">受信データサイズを格納しているイベントデータ</param>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.OnBodyLoaded(System.EventArgs)">
            <summary>
            非同期実行のメールデータ読み出しが終了したときのイベントを発行します
            </summary>
            <param name="e">イベントデータ</param>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.OnHeaderLoaded(TKMP.Net.DataLoadedArgs)">
            <summary>
            非同期実行のヘッダー読み出しが終了したときのイベントを発行します
            </summary>
            <param name="e">イベントデータ</param>
        </member>
        <member name="F:TKMP.Net.MailData_Imap._BodyData">
            <summary>
            受信データを格納しているストリーム
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData_Imap._HeaderData">
            <summary>
            ヘッダーデータを格納しているストリーム
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData_Imap._BodyLoadedLength">
            <summary>
            読み込み済みのメールデータのバイト数
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData_Imap._HeaderLoadedLength">
            <summary>
            読み込み済みのヘッダーデータのバイト数
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData_Imap._ThreadLockObject">
            <summary>
            スレッドの同期オブジェクト
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData_Imap._EventInvokeCall">
            <summary>
            trueでイベントが別スレッドで発行される
            </summary>
        </member>
        <member name="F:TKMP.Net.MailData_Imap._Flags">
            <summary>
            メールが持つフラグの一覧
            </summary>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.#ctor(System.String,System.Int32,System.Collections.Generic.List{System.String},TKMP.Net.Mailbox)">
            <summary>
            コンストラクタ
            </summary>
            <param name="uid"></param>
            <param name="length"></param>
            <param name="flags"></param>
            <param name="mailbox"></param>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.Copy(TKMP.Net.Mailbox)">
            <summary>
            このメールを指定したメールボックスへコピーします
            </summary>
            <param name="mailbox">コピー先のメールボックス</param>
            <returns>コピーを行ったときにtrueを返す</returns>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.Copy(TKMP.Net.MailData_Imap[],TKMP.Net.Mailbox)">
            <summary>
            複数のメールを指定したメールボックスへコピーします
            </summary>
            <param name="mails">変更するメールの一覧</param>
            <param name="mailbox">コピー先のメールボックス</param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.HasFlag(System.String[])">
            <summary>
            メールが指定したフラグを持っているときにtrueを返します
            </summary>
            <param name="flags">検査するフラグ</param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.HasFlag(TKMP.Net.MailFlags)">
            <summary>
            メールが指定したフラグをもっているときにtrueを返します
            </summary>
            <param name="flag">検査するフラグ</param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.AddFlag(TKMP.Net.MailFlags)">
            <summary>
            メールへ指定したフラグをセットします
            </summary>
            <param name="flag">追加するフラグ</param>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.AddFlag(System.String[])">
            <summary>
            メールへ指定したフラグをセットする
            </summary>
            <param name="flags">追加するフラグ</param>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.AddFlag(TKMP.Net.MailData_Imap[],TKMP.Net.MailFlags)">
            <summary>
            複数のメールへ指定したフラグをセットします
            </summary>
            <param name="mails">変更するメールの一覧</param>
            <param name="flag">追加するフラグ</param>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.AddFlag(TKMP.Net.MailData_Imap[],System.String[])">
            <summary>
            複数のメールへ指定したフラグをセットする
            </summary>
            <param name="mails">変更するメールの一覧</param>
            <param name="flags">追加するフラグ</param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.RemoveFlag(TKMP.Net.MailFlags)">
            <summary>
            メールへ指定したフラグをリセットする
            </summary>
            <param name="flag">取り除くフラグ</param>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.RemoveFlag(System.String[])">
            <summary>
            メールへ指定したフラグをリセットする
            </summary>
            <param name="flags">取り除くフラグ</param>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.RemoveFlag(TKMP.Net.MailData_Imap[],TKMP.Net.MailFlags)">
            <summary>
            複数のメールへ指定したフラグをリセットします
            </summary>
            <param name="mails">変更するメールの一覧</param>
            <param name="flag">追加するフラグ</param>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.RemoveFlag(TKMP.Net.MailData_Imap[],System.String[])">
            <summary>
            複数のメールへ指定したフラグをリセットする
            </summary>
            <param name="mails">変更するメールの一覧</param>
            <param name="flags">追加するフラグ</param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.CommandCall(TKMP.Net.MailData_Imap[],System.Converter{TKMP.Net.MailData_Imap[],TKMP.Imap.Command.CommandBase})">
            <summary>
            一括コマンドを発行する
            </summary>
            <param name="mails">変更するメールの一覧</param>
            <param name="flags">追加するフラグ</param>
            <param name="request_storecommand">コマンド変換定義</param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.GetFlagName(TKMP.Net.MailFlags)">
            <summary>
            メールフラグからフラグの文字列の配列を求める
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.ReadBody">
            <summary>
            メール本文の読み出しを行います
            </summary>
            <returns>データの読み出し完了でtrueを返す</returns>
            <remarks>
            <para>メールデータの読み出しを同期実行します。途中経過を表示する場合は<see cref="E:TKMP.Net.MailData_Imap.BodyDataReceive">BodyDataReceiveイベント</see>を利用してください。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.ReadBodyAnsync">
            <summary>
            メール本文の読み出しを非同期で行います
            </summary>
            <returns>非同期読み出し開始でtrue</returns>
            <remarks>
            <para>メールのヘッダー部分のみの読み出しを非同期実行します。</para>
            <para>途中経過を表示する場合は<see cref="E:TKMP.Net.MailData_Imap.BodyDataReceive">BodyDataReceiveイベント</see>を利用してください。</para>
            <para>受信の終了は<see cref="E:TKMP.Net.MailData_Imap.BodyLoaded">BodyLoadedイベント</see>を利用してください。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.MailData_Imap._Connection_BodyDataReceive(System.Object,TKMP.Net.DataReceiveArgs)">
            <summary>
            メールデータ受信中のイベント処理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.BodyRead_DataLoaded(System.Object,System.EventArgs)">
            <summary>
            本文の受信完了イベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.ReadHeader">
            <summary>
            メールのヘッダー部分のみの読み出しを行います
            </summary>
            <returns>データの読み出し完了でtrueを返す</returns>
            <remarks>
            <para>メールのヘッダー部分のみの読み出しを同期実行します。途中経過を表示する場合は<see cref="E:TKMP.Net.MailData_Imap.HeaderDataReceive">HeaderDataReceiveイベント</see>を利用してください。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.ReadHeaderAnsync">
            <summary>
            メールのヘッダー部分のみの読み出しを非同期で行います
            </summary>
            <returns>非同期読み出し開始でtrue</returns>
            <remarks>
            <para>メールのヘッダー部分のみの読み出しを非同期実行します。</para>
            <para>途中経過を表示する場合は<see cref="E:TKMP.Net.MailData_Imap.HeaderDataReceive">HeaderDataReceiveイベント</see>を利用してください。</para>
            <para>受信の終了は<see cref="E:TKMP.Net.MailData_Imap.HeaderLoaded">HeaderLoadedイベント</see>を利用してください。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.MailData_Imap._Connection_HeaderDataReceive(System.Object,TKMP.Net.DataReceiveArgs)">
            <summary>
            ヘッダーデータ受信中のイベント処理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.HeaderRead_DataLoaded(System.Object,System.EventArgs)">
            <summary>
            ヘッダーデータの受信完了イベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.Delete">
            <summary>
            このメールをメールボックスから削除します
            </summary>
            <returns>削除を行ったときにtrueを返す</returns>
            <remarks>
            <para>親となる<see cref="T:TKMP.Net.ImapClient"> ImapClientクラス</see>の接続が確立している間のみ実行可能です。</para>
            <para>このメソッドを実行すると、サーバーへは削除コマンドを即発行しますが、実際にメールボックスから削除されるのは切断処理後になります。</para>
            <para>メソッドの処理はメールへ削除フラグを追加するだけで、このインスタンス自体は削除されません。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.Delete(TKMP.Net.MailData_Imap[])">
            <summary>
            このメールをメールボックスから削除します
            </summary>
            <returns>削除を行ったときにtrueを返す</returns>
            <remarks>
            <para>親となる<see cref="T:TKMP.Net.ImapClient"> ImapClientクラス</see>の接続が確立している間のみ実行可能です。</para>
            <para>このメソッドを実行すると、サーバーへは削除コマンドを即発行しますが、実際にメールボックスから削除されるのは切断処理後になります。</para>
            <para>メソッドの処理はメールへ削除フラグを追加するだけで、このインスタンス自体は削除されません。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.MailData_Imap.DeleteAnsync">
            <summary>
            このメールをメールボックスから削除します
            </summary>
            <returns>削除を行ったときにtrueを返す</returns>
            <remarks>
            <para>親となる<see cref="T:TKMP.Net.ImapClient"> ImapClientクラス</see>の接続が確立している間のみ実行可能です。</para>
            <para>このメソッドを実行すると、サーバーへは削除コマンドを即発行しますが、実際にメールボックスから削除されるのは切断処理後になります。</para>
            <para>メソッドの処理はメールへ削除フラグを追加するだけで、このインスタンス自体は削除されません。</para>
            </remarks>
        </member>
        <member name="E:TKMP.Net.MailData_Imap.BodyDataReceive">
            <summary>
            メールデータの受信中に発生するイベント
            </summary>
            <remarks>
            <para>受信バッファにあるデータを処理するごとに発生します。このイベントの処理に時間がかかると通信速度に影響が出ます。</para>
            </remarks>
        </member>
        <member name="E:TKMP.Net.MailData_Imap.HeaderDataReceive">
            <summary>
            ヘッダーデータの受信中に発生するイベント
            </summary>
            <remarks>
            <para>受信バッファにあるデータを処理するごとに発生します。このイベントの処理に時間がかかると通信速度に影響が出ます。</para>
            </remarks>
        </member>
        <member name="E:TKMP.Net.MailData_Imap.BodyLoaded">
            <summary>
            非同期実行のメールデータ読み出しが終了したときのイベント
            </summary>
        </member>
        <member name="E:TKMP.Net.MailData_Imap.HeaderLoaded">
            <summary>
            非同期実行のヘッダー読み出しが終了したときのイベント
            </summary>
        </member>
        <member name="P:TKMP.Net.MailData_Imap.UID">
            <summary>
            メールのユニークＩＤの読み出しを行います
            </summary>
            <remarks>
            <para>メールサーバーがセットしたメールのユニークＩＤを返します。</para>
            <para>このプロパティはインスタンス作成時から有効な値がセットされています。</para>
            <para>この値は各メールデータ毎にユニークであることをサーバーが保証しているので、既読メールの識別にはこの値を使用してください。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.MailData_Imap.Length">
            <summary>
            メールのサイズの読み出しを行います
            </summary>
            <remarks>
            <para>メールデータのヘッダ部分を含めたバイトサイズを返します。</para>
            <para>このプロパティはインスタンス作成時から有効な値がセットされています。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.MailData_Imap.HeaderLoadedLength">
            <summary>
            読込み済みのヘッダーデータのバイト数を返します
            </summary>
            <remarks>
            <para>受信中のヘッダーデータの読み込み済みバイト数を返します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.MailData_Imap.BodyLoadedLength">
            <summary>
            読込み済みのメールデータのバイト数を返します
            </summary>
            <remarks>
            <para>受信中のメールデータの読み込み済みバイト数を返します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.MailData_Imap.DataStream">
            <summary>
            メールデータを格納しているストリームの読み出しを行います
            </summary>
            <remarks>
            <para>ストリームを読み出すには事前に<see cref="M:TKMP.Net.MailData_Imap.ReadBody">ReadBodyメソッド</see>を実行する必要があります。</para>
            <para>未取得時にはこのプロパティはnullを返します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.MailData_Imap.HeaderStream">
            <summary>
            ヘッダーデータを格納しているストリームの読み出しを行います
            </summary>
            <remarks>
            <para>ストリームを読み出すには事前に<see cref="M:TKMP.Net.MailData_Imap.ReadHeader">ReadHeaderメソッド</see>又は、<see cref="M:TKMP.Net.MailData_Imap.ReadBody">ReadBodyメソッド</see>を実行する必要があります。</para>
            <para>未取得時にはこのプロパティはnullを返します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.MailData_Imap.Flags">
            <summary>
            メールが持つフラグの一覧の読出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.MailData_Imap.Mailbox">
            <summary>
            このメールが存在するメールボックスクラスのインスタンスの読出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Net.SearchKey.TEXT">
            <summary>
            IMAPプロトコルのSEARCHコマンドでTEXT検索を行うためのクラス。
            指定された文字列をメッセージのヘッダまたはボディに含むメッセージ。
            </summary>
        </member>
        <member name="M:TKMP.Net.SearchKey.TEXT.#ctor(System.String)">
            <summary>
            新しいインスタンスを作成します
            </summary>
            <param name="value">検索する文字列</param>
        </member>
        <member name="M:TKMP.Net.SearchKey.TEXT.GetSendData(TKMP.Net.SearchKeyBase.GetCommandMethod)">
            <summary>
            SEARCHコマンドで使用するコマンド文字列を読み出します。
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Net.SearchKey.TEXT.Value">
            <summary>
            条件検索を行う文字列
            </summary>
        </member>
        <member name="T:TKMP.Imap.CommandSelecter">
            <summary>
            実行コマンドを選択するクラス
            </summary>
        </member>
        <member name="F:TKMP.Imap.CommandSelecter._CurrentMailbox">
            <summary>
            現在選択されているメールボックスの情報
            </summary>
        </member>
        <member name="F:TKMP.Imap.CommandSelecter.AlwaysChanged">
            <summary>
            カレントの指定が必要なときに常にコマンドを発行することを示す値
            </summary>
        </member>
        <member name="M:TKMP.Imap.CommandSelecter.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.CommandSelecter.GetSelectMailbox(TKMP.Net.Mailbox)">
            <summary>
            メールボックスの選択用コマンドを読み出します
            </summary>
            <param name="mailbox"></param>
            <returns></returns>
        </member>
        <member name="T:TKMP.Smtp.Command.RCPT_TO">
            <summary>
            あて先アドレスを送信するコマンドクラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.RCPT_TO._Address">
            <summary>
            あて先アドレス
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.RCPT_TO.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.RCPT_TO.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="P:TKMP.Smtp.Command.RCPT_TO.Address">
            <summary>
            あて先アドレスの読出しを行う
            </summary>
        </member>
        <member name="T:TKMP.Reader.MailReader">
            <summary>
            メールデータの解析を行います
            </summary>
            <remarks>
            <para>このクラスはメールデータの解析を行う専用クラスです。</para>
            <para>マルチパートメール解析結果は、このクラスが入れ子になった状態になります。</para>
            </remarks>
        </member>
        <member name="F:TKMP.Reader.MailReader._HeaderDatas">
            <summary>
            ヘッダ情報のコレクション
            </summary>
        </member>
        <member name="F:TKMP.Reader.MailReader._SubParts">
            <summary>
            マルチパートのコレクション
            </summary>
        </member>
        <member name="F:TKMP.Reader.MailReader._FileData">
            <summary>
            添付ファイル情報のクラス
            </summary>
        </member>
        <member name="F:TKMP.Reader.MailReader._Quick">
            <summary>
            簡易読出しのフラグ
            </summary>
        </member>
        <member name="F:TKMP.Reader.MailReader._ContentType">
            <summary>
            コンテンツタイプを格納したクラス
            </summary>
        </member>
        <member name="F:TKMP.Reader.MailReader._MainData">
            <summary>
            本文の内容を持つバイト配列
            </summary>
        </member>
        <member name="F:TKMP.Reader.MailReader._EncodeCharset">
            <summary>
            本文の文字列のキャラクターセット
            </summary>
        </member>
        <member name="M:TKMP.Reader.MailReader.#ctor(System.String)">
            <summary>
            メールデータの解析を行うクラスのインスタンスを初期化します
            </summary>
            <param name="FileName">メールデータが格納されたファイル</param>
            <remarks>
            <para>メールデータファイルの解析を行うためのコンストラクタです。</para>
            <para>データファイルは<see cref="T:TKMP.Net.MailData">MailDataクラス</see>出力データをファイル化したものを推奨しますが、それ以外でもメールの生データなら解析は可能です。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Reader.MailReader.#ctor(System.String,System.Boolean)">
            <summary>
            メールデータの解析を行うクラスのインスタンスを初期化します
            </summary>
            <param name="FileName">メールデータが格納されたファイル</param>
            <param name="NoBodyRead">本文の読込みを行わない高速解析をする場合にtrue</param>
            <remarks>
            <para>メールデータファイルの解析を行うためのコンストラクタです。</para>
            <para>データファイルは<see cref="T:TKMP.Net.MailData">MailDataクラス</see>出力データをファイル化したものを推奨しますが、それ以外でもメールの生データなら解析は可能です。</para>
            <para>NoBodyReadにtrueをセットするとメール本文のデコード処理を省略するため若干高速に処理されます。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Reader.MailReader.#ctor(System.IO.Stream)">
            <summary>
            メールデータの解析を行うクラスのインスタンスを初期化します
            </summary>
            <param name="Stream">メールデータが格納されているストリーム</param>
            <remarks>
            <para>メールのストリームデータの解析を行うためのコンストラクタです。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Reader.MailReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            メールデータの解析を行うクラスのインスタンスを初期化します
            </summary>
            <param name="Stream">メールデータが格納されているストリーム</param>
            <param name="NoBodyRead">本文の読込みを行わない高速解析をする場合にtrue</param>
            <remarks>
            <para>メールのストリームデータの解析を行うためのコンストラクタです。</para>
            <para>NoBodyReadにtrueをセットするとメール本文のデコード処理を省略するため若干高速に処理されます。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Reader.MailReader.ReadMain(System.IO.Stream)">
            <summary>
            本文の解析
            </summary>
            <param name="Stream">データストリーム</param>
        </member>
        <member name="M:TKMP.Reader.MailReader.ReadMain_MultiPart(System.IO.Stream)">
            <summary>
            マルチパートの解析
            </summary>
            <param name="Stream">データストリーム</param>
        </member>
        <member name="M:TKMP.Reader.MailReader.ReadMain_Quick(System.IO.Stream)">
            <summary>
            内容を読み込まない高速解析用
            </summary>
            <param name="Stream">データストリーム</param>
        </member>
        <member name="M:TKMP.Reader.MailReader.ReadMain_Text(System.IO.Stream)">
            <summary>
            テキストベースの本文を読み込む
            </summary>
            <param name="Stream">データストリーム</param>
        </member>
        <member name="M:TKMP.Reader.MailReader.ReadMain_Data(System.IO.Stream)">
            <summary>
            添付ファイルの読出し(解析のみ) 
            </summary>
            <param name="Stream">データストリーム</param>
        </member>
        <member name="M:TKMP.Reader.MailReader.ReadHeader(System.IO.Stream)">
            <summary>
            ヘッダー部分の解析をする
            </summary>
            <param name="Stream">データストリーム</param>
        </member>
        <member name="P:TKMP.Reader.MailReader.EncodeCharset">
            <summary>
            本文の文字コードの読み出しと設定を行う
            </summary>
            <remarks>
            <para>通常このプロパティはメール解析時に適切な値がセットされています</para>
            <para>ヘッダ情報と本文の文字コードを一致せず、文字化けが起こる場合に、強制的に文字コードを変更する場合に使用します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Reader.MailReader.ContentType">
            <summary>
            このパートのContentTypeの読み出しを行う
            </summary>
        </member>
        <member name="P:TKMP.Reader.MailReader.MainText">
            <summary>
            このメールの本文を返す（マルチパートの時は最初に見つかったテキストセクションの本文）
            </summary>
            <remarks>
            <para>このメールのテキスト本文を返します。</para>
            <para>呼び出したMailReaderクラスがマルチパートのときは、サブパート内で最初に見つかったテキスト本文を返します。</para>
            <para>全てのパートでテキストパートが存在しない場合は string.Empty を返します</para>
            </remarks>
        </member>
        <member name="P:TKMP.Reader.MailReader.MainData">
            <summary>
            このパートの本文を示すバイト配列の読み出しを行う
            </summary>
        </member>
        <member name="P:TKMP.Reader.MailReader.FileCollection">
            <summary>
            添付されているファイル情報のクラスリストの読み出しを行う
            </summary>
            <returns>ファイル情報のコレクション</returns>
            <remarks>
            <para>このメール内にある全ての添付ファイルのコレクションクラスを返します。</para>
            <para>サブパートではそのパート内にある添付ファイルのコレクションクラスになります。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Reader.MailReader.FileCount">
            <summary>
            添付ファイル数の読み出しを行う
            </summary>
            <remarks>
            <para>このメール内にある全ての添付ファイルの数を返します。</para>
            <para>サブパートではそのパート内にある添付ファイルの数になります。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Reader.MailReader.PartCollection">
            <summary>
            保持しているサブパートの読み出しを行う
            </summary>
            <remarks>
            <para>サブパートのコレクションクラスを返します。</para>
            <para>マルチパートでない場合は、サイズ０のコレクションを返します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Reader.MailReader.HeaderCollection">
            <summary>
            ヘッダ情報を格納しているコレクションクラスの読み出しを行う
            </summary>
            <remarks>
            <para>メールのヘッダ情報を格納しているコレクションクラスを返します。</para>
            <para>サブパートではそのパートの情報になります。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Reader.MailReader.FirstTextPart">
            <summary>
            最初に見つかったテキストパートの読み出しを行う
            </summary>
            <remarks>
            <para>このメールのテキスト情報を持つMailReaderクラスを返します。</para>
            <para>呼び出したMailReaderクラスがマルチパートのときは、サブパート内で最初に見つかったテキストパートのMailReaderを返します。</para>
            <para>全てのパートでテキストパートが存在しない場合は null を返します</para>
            </remarks>
        </member>
        <member name="T:TKMP.Pop.Command.Command_Logon">
            <summary>
            ログオン処理を実行します
            </summary>
        </member>
        <member name="F:TKMP.Pop.Command.Command_Logon._ConnectionResponse">
            <summary>
            接続時にサーバーが返してきた文字列
            </summary>
        </member>
        <member name="F:TKMP.Pop.Command.Command_Logon._PopLogon">
            <summary>
            ログオン処理クラス
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.Command_Logon.#ctor(TKMP.Net.IPopLogon,System.String)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.Command_Logon.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Net.SmtpNullLogon">
            <summary>
            ログオン処理が必要の無いＳＭＴＰサーバー用のログオンクラス
            </summary>
        </member>
        <member name="M:TKMP.Net.SmtpNullLogon.TKMP#Net#ISmtpLogon#Greeting(System.String)">
            <summary>
            接続の確立直後の送信メッセージをセットします。
            </summary>
            <param name="Receive">受信した文字列</param>
            <returns>送信文字列が返されます（送信文字列無しの時はNull）</returns>
        </member>
        <member name="M:TKMP.Net.SmtpNullLogon.TKMP#Net#ISmtpLogon#Connection(System.String,System.String@,System.String@)">
            <summary>
            ログオン時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列が返されます（送信文字列無しの時はNull）</param>
            <param name="LogMessage">通信ログで表示する文字列が返されます。通常パスワードなど非表示としたい通信内容の場合に内容がセットされます。Sendを通信ログとする場合はNullがセットされます</param>
            <returns>ログオン処理を継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.SmtpNullLogon.TKMP#Net#ISmtpLogon#Initialize">
            <summary>
            ログオン処理を最初からやり直すための初期化を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Net.SmtpNullLogon.TKMP#Net#ISmtpLogon#Logon">
            <summary>
            ログオンが正常に行われたことを示す値読み出します
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.NOOP">
            <summary>
            接続を維持するための何もしないコマンド
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.NOOP.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.NOOP.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Net.SearchKey.SINCE">
            <summary>
            IMAPプロトコルのSINCEコマンドで検索を行うためのクラス。
            内部日付が指定した日付内またはそれより新しいのメッセージ。 
            </summary>
        </member>
        <member name="M:TKMP.Net.SearchKey.SINCE.#ctor(System.DateTime)">
            <summary>
            新しいインスタンスを作成します
            </summary>
            <param name="value">条件検索を行う日付</param>
        </member>
        <member name="M:TKMP.Net.SearchKey.SINCE.GetSendData(TKMP.Net.SearchKeyBase.GetCommandMethod)">
            <summary>
            SEARCHコマンドで使用するコマンド文字列を読み出します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.SearchKey.SINCE.GetDateTimeString(System.DateTime)">
            <summary>
            現在の日時文字列を作成する
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Net.SearchKey.SINCE.Value">
            <summary>
            条件検索を行う日付
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.APPEND">
            <summary>
            APPENDコマンドを発行する
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.APPEND._Mailbox">
            <summary>
            登録するフラグの一覧
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.APPEND._Flags">
            <summary>
            登録するフラグの一覧
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.APPEND._Stream">
            <summary>
            送信データ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.APPEND.#ctor(TKMP.Net.Mailbox,System.String[],System.IO.Stream)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.APPEND.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.SUBSCRIBE">
            <summary>
            SUBSCRIBEコマンドを発行する
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.SUBSCRIBE._MailBox">
            <summary>
            選択するメールボックス名
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.SUBSCRIBE.#ctor(TKMP.Net.Mailbox)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.SUBSCRIBE.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Pop.Command.RETR">
            <summary>
            メールデータの読み出しコマンドを発行します
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.RETR.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.RETR.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Net.MessageLog">
            <summary>
            通信ログを管理するクラス
            </summary>
        </member>
        <member name="M:TKMP.Net.MessageLog.OnMessageNew(System.EventArgs)">
            <summary>
            通信ログに新しいメッセージを登録した時のイベントを発生します
            </summary>
            <param name="e">イベント データを格納している System.EventArgs</param>
        </member>
        <member name="F:TKMP.Net.MessageLog._Counter">
            <summary>
            ログ読み出しカウンター
            </summary>
        </member>
        <member name="F:TKMP.Net.MessageLog._LogDatas">
            <summary>
            通信ログの格納クラス
            </summary>
        </member>
        <member name="F:TKMP.Net.MessageLog._NewMessage">
            <summary>
            新しいメッセージが登録されたことを示す値
            </summary>
        </member>
        <member name="F:TKMP.Net.MessageLog._ThreadLockObject">
            <summary>
            スレッドの同期オブジェクト
            </summary>
        </member>
        <member name="M:TKMP.Net.MessageLog.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Net.MessageLog.Eof">
            <summary>
            記録ログの最後を調べる
            </summary>
            <returns>ログの最後のときtrueを返す</returns>
        </member>
        <member name="M:TKMP.Net.MessageLog.MoveFirst">
            <summary>
            ログの読み出し位置を先頭にします
            </summary>
        </member>
        <member name="M:TKMP.Net.MessageLog.Enqueue(TKMP.Net.MessageArgs)">
            <summary>
            データを追加します
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:TKMP.Net.MessageLog.Dequeue">
            <summary>
            データを取り出す
            </summary>
            <returns>記録されたメッセージログ</returns>
        </member>
        <member name="M:TKMP.Net.MessageLog.Clear">
            <summary>
            記録している通信ログを削除します
            </summary>
        </member>
        <member name="M:TKMP.Net.MessageLog.CallEvent">
            <summary>
            メッセージ追加イベントを発生します
            </summary>
        </member>
        <member name="E:TKMP.Net.MessageLog.MessageNew">
            <summary>
            通信ログに新しいメッセージを登録した時のイベント
            </summary>
        </member>
        <member name="P:TKMP.Net.MessageLog.NewMessage">
            <summary>
            新しいメッセージが登録されたことを示す値の読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Net.ImapClient">
            <summary>
            ＩＭＡＰサーバーへの接続処理と受信メール一覧の読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Net.IReceiveClient">
            <summary>
            メール受信を行うための接続を行うクライアントのインターフェイスを定義します。
            </summary>
        </member>
        <member name="M:TKMP.Net.IReceiveClient.CloseAnsync">
            <summary>
            通信の切断処理を非同期で行います
            </summary>
        </member>
        <member name="M:TKMP.Net.IReceiveClient.GetMailList">
            <summary>
            メールボックス内のメールデータの一覧の読み出しを行います
            </summary>
            <remarks>
            <para>現在メールボックスにあるメールデータの一覧を返します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.IReceiveClient.KeepAlive">
            <summary>
            接続を維持するための処理を有効にします
            </summary>
            <remarks>
            <para>このプロパティをtrueにすると、一定時間ごとに「noop」コマンドがＰＯＰサーバーに送信されます</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.IReceiveClient.KeepAliveInterval">
            <summary>
            接続を維持するためのコマンドを送信する時間（秒単位）の設定と読み出しを行います
            </summary>
            <remarks>
            <para>接続を維持するためのコマンドを送信する時間を設定します</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.ImapClient.OnMessageReceive(TKMP.Net.MessageArgs)">
            <summary>
             データ受信直後のイベントを発生します
            </summary>
            <param name="e">受信メッセージを格納しているデータクラス</param>
        </member>
        <member name="M:TKMP.Net.ImapClient.OnMessageSend(TKMP.Net.MessageArgs)">
            <summary>
             データ送信直後のイベントを発生します
            </summary>
            <param name="e">受信メッセージを格納しているデータクラス</param>
        </member>
        <member name="M:TKMP.Net.ImapClient.OnCertificateValidation(TKMP.Net.CertificateValidationArgs)">
            <summary>
            暗号化通信を行う場合に正当性が認められなかった証明書の検証を行うときのイベントを発生します
            </summary>
            <param name="e">証明書の検証を行うためのデータクラス</param>
        </member>
        <member name="F:TKMP.Net.ImapClient._ImapLogon">
            <summary>
            ログオン処理クラス
            </summary>
        </member>
        <member name="F:TKMP.Net.ImapClient._HostName">
            <summary>
            接続先のホスト名
            </summary>
        </member>
        <member name="F:TKMP.Net.ImapClient._Port">
            <summary>
            接続先ポート
            </summary>
        </member>
        <member name="F:TKMP.Net.ImapClient._Connection">
            <summary>
            コネクションクラス
            </summary>
        </member>
        <member name="F:TKMP.Net.ImapClient._CommandNumber">
            <summary>
            コマンド発行管理クラス
            </summary>
        </member>
        <member name="F:TKMP.Net.ImapClient._Connected">
            <summary>
            通信接続中にtrue
            </summary>
        </member>
        <member name="F:TKMP.Net.ImapClient._TimeOutInterval">
            <summary>
            タイムアウトまでの時間
            </summary>
        </member>
        <member name="F:TKMP.Net.ImapClient._KeepAliveInterval">
            <summary>
            KeepAliveを発行する間隔
            </summary>
        </member>
        <member name="F:TKMP.Net.ImapClient._KeepAlive">
            <summary>
            KeepAliveを有効にする
            </summary>
        </member>
        <member name="F:TKMP.Net.ImapClient._MessageLog">
            <summary>
            メッセージログを記録するクラス
            </summary>
        </member>
        <member name="F:TKMP.Net.ImapClient._ThreadLockObject">
            <summary>
            スレッドの同期オブジェクト
            </summary>
        </member>
        <member name="F:TKMP.Net.ImapClient._AuthenticationProtocol">
            <summary>
            通信で使用する暗号化の方法
            </summary>
        </member>
        <member name="F:TKMP.Net.ImapClient._MailboxCache">
            <summary>
            メールボックスのキャッシュクラス
            </summary>
        </member>
        <member name="F:TKMP.Net.ImapClient._DefaultMailbox">
            <summary>
            MailDatasプロパティで読み出すデフォルトのメールボックス
            </summary>
        </member>
        <member name="M:TKMP.Net.ImapClient.#ctor(TKMP.Net.IImapLogon,System.Net.IPAddress,System.Int32)">
            <summary>
            ＩＭＡＰクライアントクラスのインスタンスを初期化します
            </summary>
            <param name="ImapLogon">ログオン処理を行うImapLogonクラス</param>
            <param name="Address">接続先を示すアドレス</param>
            <param name="Port">接続先サーバーのポート番号</param>
            <remarks>
            <para>クラスのインスタンスの作成には接続先を示すＩＰアドレス、ポート番号及び、接続時の手順を処理するためのImapLogonインターフェイスを持つクラスが必要です</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.ImapClient.#ctor(TKMP.Net.IImapLogon,System.String,System.Int32)">
            <summary>
            ＩＭＡＰクライアントクラスのインスタンスを初期化します
            </summary>
            <param name="ImapLogon">ログオン処理を行うImapLogonクラス</param>
            <param name="HostName">接続先のホスト名</param>
            <param name="Port">接続先サーバーのポート番号</param>
            <remarks>
            <para>クラスのインスタンスの作成には接続先を示すＩＰアドレス、ポート番号及び、接続時の手順を処理するためのImapLogonインターフェイスを持つクラスが必要です</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.ImapClient.ConnectInit(System.String@)">
            <summary>
            接続の共通初期処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.ImapClient.Connect">
            <summary>
            接続を開始します
            </summary>
            <returns>接続が正常に行えない場合falseを、受信メールが正常に読み出せた場合にtrueを返します</returns>
            <remarks>
            <para>ネットワークの接続確立後、ログオン処理、メールデータの一覧取得までを行います。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.ImapClient.Close">
            <summary>
            通信の切断処理を行います
            </summary>
        </member>
        <member name="M:TKMP.Net.ImapClient.CloseAnsync">
            <summary>
            通信の切断処理を非同期で行います
            </summary>
        </member>
        <member name="F:TKMP.Net.ImapClient._MailboxList">
            <summary>
            クライアントが取得したメールボックスの情報
            </summary>
        </member>
        <member name="M:TKMP.Net.ImapClient.RenameMailbox(TKMP.Net.Mailbox,System.String)">
            <summary>
            保持しているメールボックスの名称を変更する
            </summary>
            <param name="mailbox"></param>
            <param name="encodename"></param>
        </member>
        <member name="M:TKMP.Net.ImapClient.ReadMailBox">
            <summary>
            メールボックスの一覧を読み出します
            </summary>
        </member>
        <member name="M:TKMP.Net.ImapClient.ReadSubScribeFlag(TKMP.Net.Mailbox)">
            <summary>
            メールボックスの一覧を読み出します
            </summary>
        </member>
        <member name="M:TKMP.Net.ImapClient.GetSubMailbox(TKMP.Net.Mailbox)">
            <summary>
            指定したメールボックスに含まれる階層のメールボックス一覧を取得する
            </summary>
            <param name="mailbox"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.ImapClient.GetMailBox">
            <summary>
            メールボックスの一覧を読み出します
            </summary>
            <returns>メールボックスの情報を持つクラスの配列</returns>
        </member>
        <member name="M:TKMP.Net.ImapClient.FindMailbox(System.String[])">
            <summary>
            指定した名称のメールボックスを取得します
            </summary>
            <param name="names">メールボックスの名称を指定します。配列で指定した場合はSeparatorで接続したメールボックス名になります。</param>
            <returns>該当するメールボックスが存在するとき<see cref="T:TKMP.Net.Mailbox">Mailbox</see>クラスをかえします。存在しないときはnullを返します</returns>
        </member>
        <member name="M:TKMP.Net.ImapClient.CreateMailbox(System.String[])">
            <summary>
            指定した名称のメールボックスを作成します
            </summary>
            <param name="names">作成するメールボックスの名称を指定します。配列で指定した場合はSeparatorで接続したメールボックス名になります。</param>
            <returns>正常に作成できたときtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.ImapClient.Refresh">
            <summary>
            メールボックスの取得情報を更新します
            </summary>
        </member>
        <member name="M:TKMP.Net.ImapClient.AddCommand(TKMP.Imap.Command.CommandBase,TKMP.Common.Connection{TKMP.Imap.Command.CommandBase}.CommandSyncMethod)">
            <summary>
            通信クラスへコマンドを登録する
            </summary>
            <param name="command"></param>
            <param name="SyncMethod"></param>
        </member>
        <member name="M:TKMP.Net.ImapClient.AddCommand(TKMP.Imap.Command.CommandBase)">
            <summary>
            通信クラスへコマンドを登録する
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:TKMP.Net.ImapClient.GetMailList">
            <summary>
            メールボックス内のメールデータの一覧の読み出しを行います
            </summary>
            <remarks>
            <para><see cref="P:TKMP.Net.ImapClient.DefaultMailbox">DefaultMailbox</see>で指定したメールボックスにあるメールデータの一覧を返します。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.ImapClient._Connection_MessageSend(System.Object,TKMP.Net.MessageArgs)">
            <summary>
            データ送信イベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.ImapClient._Connection_MessageReceive(System.Object,TKMP.Net.MessageArgs)">
            <summary>
            データ受信イベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.ImapClient._Connection_RequestKeepAlive(System.Object,System.EventArgs)">
            <summary>
            接続維持のためのコマンドを発行する
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.ImapClient._Connection_BeforeExecution(System.Object,TKMP.Common.Connection{TKMP.Imap.Command.CommandBase}.BeforeExecutionArgs)">
            <summary>
            コマンドが実行される直前のイベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.ImapClient.QUIT_ExecutionEnd(System.Object,System.EventArgs)">
            <summary>
            サーバーからのＱＵＩＴ処理の終了イベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.ImapClient.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            ＳＳＬ認証の判定
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="E:TKMP.Net.ImapClient.MessageReceive">
            <summary>
            データ受信直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Net.ImapClient.MessageSend">
            <summary>
            データ送信直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Net.ImapClient.CertificateValidation">
            <summary>
            暗号化通信を行う場合に正当性が認められなかった証明書の検証を行うときのイベント
            </summary>
        </member>
        <member name="P:TKMP.Net.ImapClient.TimeOutInterval">
            <summary>
            送受信がタイムアウトする時間（秒単位）の設定と読み出しを行います
            </summary>
            <remarks>
            <para>送信に対する受信待ちの時間を設定します</para>
            <para>デフォルト値は２０秒です</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.ImapClient.KeepAliveInterval">
            <summary>
            接続を維持するためのコマンドを送信する時間（秒単位）の設定と読み出しを行います
            </summary>
            <remarks>
            <para>接続を維持するためのコマンドを送信する時間を設定します</para>
            <para>デフォルト値は３０秒です</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.ImapClient.KeepAlive">
            <summary>
            接続を維持するための処理を有効にします
            </summary>
            <remarks>
            <para>このプロパティをtrueにすると、一定時間ごとに「noop」コマンドがＰＯＰサーバーに送信されます</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.ImapClient.Connected">
            <summary>
            通信が確立している事を表す値を読み出します
            </summary>
            <remarks>
            <para><see cref="M:TKMP.Net.ImapClient.Connect">Connectメソッド</see>の実行後に正常にログオン作業が終了するとtrueを返します</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.ImapClient.MessageLog">
            <summary>
            メッセージのログを記録するクラスの読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.ImapClient.CommandSelecter">
            <summary>
            適切なコマンドを選択するクラスの読み出しを行なう
            </summary>
        </member>
        <member name="P:TKMP.Net.ImapClient.AuthenticationProtocol">
            <summary>
            通信で使用する暗号化の方法の読み出しと設定を行います
            </summary>
        </member>
        <member name="P:TKMP.Net.ImapClient.IsEncrypted">
            <summary>
            現在の通信が暗号化されていることを示す値の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.ImapClient.HostName">
            <summary>
            接続先のホスト名の読み出を行います
            </summary>
        </member>
        <member name="P:TKMP.Net.ImapClient.DefaultMailbox">
            <summary>
            MailDatasプロパティで読み出すデフォルトのメールボックスの読出しと設定を行います
            </summary>
            <remarks>
            <para>このプロパティは<see cref="T:TKMP.Net.IReceiveClient">IReceiveインターフェイス</see>を利用して<see cref="M:TKMP.Net.ImapClient.GetMailList">MailDatasメソッド</see>使うときに使用します</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.ImapClient.Separator">
            <summary>
            階層区切り文字を読み出しと設定を行います
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.ResponseLoader">
            <summary>
            コマンドレスポンスの解析を行うクラス
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.ResponseLoader.Load_FLAGS(System.String,TKMP.Net.Mailbox)">
            <summary>
            メールボックスが扱えるフラグ情報を読み出す
            </summary>
            <param name="res">* FLAGS ( --- )</param>
            <param name="mailbox"></param>
        </member>
        <member name="M:TKMP.Imap.Command.ResponseLoader.Load_FETCH(System.String)">
            <summary>
            メールの情報を読み出す
            </summary>
            <param name="res">* FETCH (UID ---- ) </param>
        </member>
        <member name="T:TKMP.Imap.Command.ResponseLoader.FETCH_Data">
            <summary>
            FETCHコマンドの結果クラス
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.Command_Logout">
            <summary>
            ログアウト処理を実行します
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.Command_Logout._ImapLogin">
            <summary>
            ログオン処理クラス
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.Command_Logout.#ctor(TKMP.Net.IImapLogon,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.Command_Logout.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.COPY">
            <summary>
            COPYコマンドを発行する
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.COPY._Mailbox">
            <summary>
            メールボックス
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.COPY._UID">
            <summary>
            識別用のUID
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.COPY._Mail">
            <summary>
            コピー元のメールデータ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.COPY.#ctor(TKMP.Net.MailData_Imap[],TKMP.Net.Mailbox)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.COPY.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Common.Connection`1">
            <summary>
            接続管理用のクラス
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._ReceiveBlockSize">
            <summary>
            受信バッファの最大サイズ
            </summary>
        </member>
        <member name="M:TKMP.Common.Connection`1.OnRequestKeepAlive(System.EventArgs)">
            <summary>
            KeepAliveシグナルを要求するイベントを発生します
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Common.Connection`1.OnMessageReceive(TKMP.Net.MessageArgs)">
            <summary>
             データ送信直後のイベントを発生します
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Common.Connection`1.OnMessageSend(TKMP.Net.MessageArgs)">
            <summary>
             データ送信直後のイベントを発生します
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Common.Connection`1.OnBeforeExecution(TKMP.Common.Connection{`0}.BeforeExecutionArgs)">
            <summary>
            コマンド実行の直前のイベントを発生する
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._HostName">
            <summary>
            接続先のホスト名
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._Port">
            <summary>
            接続ポート番号
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._TimeOutInterval">
            <summary>
            タイムアウトまでの時間
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._KeepAliveInterval">
            <summary>
            KeepAliveを発行する間隔
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._NetStream">
            <summary>
            送受信を行うためのストリームクラス
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._Socket">
            <summary>
            通信ソケットクラス
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._CommandQueue">
            <summary>
            コマンド送信用のメッセージキュー
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._EventQueue">
            <summary>
            イベントキュー
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._CommandThread">
            <summary>
            コマンドの非同期処理用スレッド
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._EventThread">
            <summary>
            イベント通知の非同期処理用スレッド
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._MessageLog">
            <summary>
            メッセージログを記録するクラス
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._ExecutionLockObject">
            <summary>
            コマンド実行スレッドの同期オブジェクト
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._EventLockObject">
            <summary>
            イベント発生スレッドの同期オブジェクト
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._ConnectCommand">
            <summary>
            接続開始コマンド
            </summary>
        </member>
        <member name="F:TKMP.Common.Connection`1._CommandLockObject">
            <summary>
            コマンド終了待ちスレッドの同期オブジェクト
            </summary>
        </member>
        <member name="M:TKMP.Common.Connection`1.#ctor(System.String,System.Int32,TKMP.Net.MessageLog,`0)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Common.Connection`1.Connect">
            <summary>
            接続開始
            </summary>
            <returns>接続直後に受信した文字列</returns>
        </member>
        <member name="M:TKMP.Common.Connection`1.ConnectSSL(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            接続開始
            </summary>
            <returns>接続直後に受信した文字列</returns>
        </member>
        <member name="M:TKMP.Common.Connection`1.ConnectPrivate(System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            接続開始
            </summary>
            <param name="ssl"></param>
            <param name="RemoteCertificateValidationCallback"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Common.Connection`1.ChangeTLSAuthenticate(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            通信処理をＴＬＳへ変更する
            </summary>
        </member>
        <member name="M:TKMP.Common.Connection`1.Close">
            <summary>
            通信切断処理
            </summary>
        </member>
        <member name="M:TKMP.Common.Connection`1.AddCommand(`0)">
            <summary>
            実行コマンドを登録する
            </summary>
            <param name="Command"></param>
        </member>
        <member name="M:TKMP.Common.Connection`1.AddCommand(`0,TKMP.Common.Connection{`0}.CommandSyncMethod)">
            <summary>
            実行コマンドを登録する
            </summary>
            <param name="Command"></param>
            <param name="SyncMethod"></param>
        </member>
        <member name="M:TKMP.Common.Connection`1.ClearCommand">
            <summary>
            現在保留中で非同期指定されたコマンドをクリアする
            </summary>
        </member>
        <member name="M:TKMP.Common.Connection`1.SyncCommand(`0,TKMP.Common.Connection{`0}.CommandSyncMethod)">
            <summary>
            同期実行の終了を待つ
            </summary>
        </member>
        <member name="M:TKMP.Common.Connection`1.CommandExecution">
            <summary>
            コマンドキューの処理を行う非同期メソッド
            </summary>
        </member>
        <member name="M:TKMP.Common.Connection`1.EventExecution">
            <summary>
            イベントキューの処理を行う非同期メソッド
            </summary>
        </member>
        <member name="M:TKMP.Common.Connection`1.Command_MessageSend(System.Object,TKMP.Net.MessageArgs)">
            <summary>
            メッセージを送信したときのイベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Common.Connection`1.Command_MessageReceive(System.Object,TKMP.Net.MessageArgs)">
            <summary>
            メッセージを受信したときのイベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:TKMP.Common.Connection`1.RequestKeepAlive">
            <summary>
            KeepAliveシグナルを要求するイベント
            </summary>
        </member>
        <member name="E:TKMP.Common.Connection`1.MessageReceive">
            <summary>
            データ送信直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Common.Connection`1.MessageSend">
            <summary>
            データ送信直直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Common.Connection`1.BeforeExecution">
            <summary>
            コマンド実行の直前のイベント
            </summary>
        </member>
        <member name="P:TKMP.Common.Connection`1.ThredName">
            <summary>
            この通信クラスのスレッド名
            </summary>
        </member>
        <member name="P:TKMP.Common.Connection`1.TimeOutInterval">
            <summary>
            送受信がタイムアウトする時間（秒単位）の設定と読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Common.Connection`1.KeepAliveInterval">
            <summary>
            KeepAliveを発行する時間（秒単位）の設定と読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Common.Connection`1.IsEncrypted">
            <summary>
            現在の通信が暗号化されていることを示す値の読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Common.Connection`1.CommandSyncMethod">
            <summary>
            同期実行待ちの時に外部処理を呼び出すためのデリゲート
            </summary>
        </member>
        <member name="T:TKMP.Common.Connection`1.BeforeExecutionArgs">
            <summary>
            コマンド実行の直前のイベントデータ
            </summary>
        </member>
        <member name="M:TKMP.Common.Connection`1.BeforeExecutionArgs.#ctor(`0)">
            <summary>
            新しいインスタンスを作成する
            </summary>
        </member>
        <member name="T:TKMP.Common.Connection`1.BeforeExecutionHandler">
            <summary>
            コマンド実行の直前のイベントハンドル
            </summary>
        </member>
        <member name="T:TKMP.Writer.MailAddressCollection">
            <summary>
            送信先メールアドレスを格納するコレクション
            </summary>
        </member>
        <member name="F:TKMP.Writer.MailAddressCollection.MailAddressPattern">
            <summary>
            メールアドレスを示す正規表現
            </summary>
        </member>
        <member name="M:TKMP.Writer.MailAddressCollection.Add(System.String)">
            <summary>
            コレクションにメールアドレスを追加します
            </summary>
            <param name="Address">コレクションに追加するメールアドレスを示す文字列</param>
        </member>
        <member name="M:TKMP.Writer.MailAddressCollection.AddRange(System.String[])">
            <summary>
            コレクションにメールアドレスを追加します
            </summary>
            <param name="AddressList">コレクションに追加するメールアドレスを示す文字列の配列</param>
        </member>
        <member name="M:TKMP.Writer.MailAddressCollection.Remove(System.String)">
            <summary>
            コレクションから指定したメールアドレスを削除します
            </summary>
            <param name="Address">コレクションから削除するメールアドレス</param>
        </member>
        <member name="F:TKMP.Writer.MailAddressCollection._MailAddressValidate">
            <summary>
            メールアドレスの登録時に記述の検証を行うことを示す値
            </summary>
        </member>
        <member name="M:TKMP.Writer.MailAddressCollection.#ctor">
            <summary>
            新しいインスタンスを作成します
            </summary>
        </member>
        <member name="M:TKMP.Writer.MailAddressCollection.IsAddressPattern(System.String)">
            <summary>
            文字列がメールアドレスのパターンに一致する事を確認します
            </summary>
            <param name="Address">メールアドレスを示す文字列</param>
            <returns>メールアドレスとして認識できる場合にTrueを返します</returns>
        </member>
        <member name="P:TKMP.Writer.MailAddressCollection.MailAddressValidate">
            <summary>
            メールアドレスの登録時に記述の検証を行うことを示す値の読み出しと設定を行います
            </summary>
        </member>
        <member name="T:TKMP.Smtp.Command.RSET">
            <summary>
            通信のリセットコマンドを発行します
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.RSET.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.RSET.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Smtp.Command.ResponseCode">
            <summary>
            通信レスポンスを処理するクラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.ResponseCode._MessageText">
            <summary>
            処理したメッセージ
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.ResponseCode._LastCodeNumber">
            <summary>
            最後に格納したコード番号
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.ResponseCode._Messages">
            <summary>
            コード別のレスポンス一覧
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.ResponseCode.GetMessage(System.Int32)">
            <summary>
            指定コード行にあるメッセージを返す
            </summary>
            <param name="Code"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Smtp.Command.ResponseCode.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.ResponseCode.#ctor(TKMP.Smtp.Command.ResponseCode,TKMP.Smtp.Command.ResponseNumbers)">
            <summary>
            すでにあるレスポンスクラスを元に新しい終了コードを持ったレスポンスクラスを作成する
            </summary>
            <param name="BaseResponse"></param>
            <param name="LastCode"></param>
        </member>
        <member name="M:TKMP.Smtp.Command.ResponseCode.Clear">
            <summary>
            レスポンス情報を初期化する
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.ResponseCode.InCodeNumber(TKMP.Smtp.Command.ResponseNumbers)">
            <summary>
            保持レスポンス内に指定したコードがあるかを確認する
            </summary>
            <param name="CodeNumber"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Smtp.Command.ResponseCode.ResponseCheck(System.String,System.String)">
            <summary>
            レスポンステキストからコード部分を取り出す
            </summary>
            <param name="ResponseText">レスポンステキスト</param>
            <param name="LineEndCode">行の終了を示す文字列</param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Smtp.Command.ResponseCode.NumberStringCheck(System.String,System.Int32,System.Int32)">
            <summary>
            指定範囲のテキストが数値に変換可能かを調べる
            </summary>
            <param name="text"></param>
            <param name="startindex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="P:TKMP.Smtp.Command.ResponseCode.Count">
            <summary>
            受信したコードの数を返す
            </summary>
        </member>
        <member name="P:TKMP.Smtp.Command.ResponseCode.MessageText">
            <summary>
            処理したメッセージを返す
            </summary>
        </member>
        <member name="P:TKMP.Smtp.Command.ResponseCode.LastCodeNumber">
            <summary>
            最後に格納したコード番号を読み出す
            </summary>
        </member>
        <member name="T:TKMP.Smtp.Command.ResponseCode.Response">
            <summary>
            コード別にレスポンスを保存するためのクラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.ResponseCode.Response.Code">
            <summary>
            コード番号
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.ResponseCode.Response.NoEndMessage">
            <summary>
            全てのメッセージを受信しきっていないときにtrue
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.ResponseCode.Response._Message">
            <summary>
            追加メッセージ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.ResponseCode.Response.#ctor(System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Code"></param>
        </member>
        <member name="M:TKMP.Smtp.Command.ResponseCode.Response.AddMessage(System.String)">
            <summary>
            現在のコードにメッセージを追加する
            </summary>
            <param name="Message"></param>
        </member>
        <member name="P:TKMP.Smtp.Command.ResponseCode.Response.Message">
            <summary>
            処理他メッセージを返す
            </summary>
        </member>
        <member name="T:TKMP.Reader.Header.ContentType">
            <summary>
            Content-Typeの解析結果を格納するクラス
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.CONTENTTYPE_PATTERN">
            <summary>
            Content-Typeの基本的な情報を取り出すための正規表現
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.CONTENTDISPOSITION_PATTERN">
            <summary>
            Content-Dispositionの基本的な情報を取り出すための正規表現
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.CONTENT_PRAMETER_PATTERN">
            <summary>
            Content内のparameterの基本的な情報を取り出すための正規表現
            </summary>
        </member>
        <member name="M:TKMP.Reader.Header.ContentType.#ctor(TKMP.Reader.MailReader)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Reader">メール解析クラス</param>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.CONTENTTYPE_REGEX">
            <summary>
            Content-Typeの基本的な情報を取り出すための正規表現解析クラス
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.CONTENTDISPOSITION_REGEX">
            <summary>
            Content-Dispositionの基本的な情報を取り出すための正規表現解析クラス
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.CONTENT_PRAMETER_REGEX">
            <summary>
            Content内のparameterの基本的な情報を取り出すための正規表現解析クラス
            </summary>
        </member>
        <member name="M:TKMP.Reader.Header.ContentType.ReadContentType(TKMP.Reader.MailReader)">
            <summary>
            Content-Typeを解析
            </summary>
            <param name="Reader">メール解析クラス</param>
        </member>
        <member name="M:TKMP.Reader.Header.ContentType.ReadContentTransferEncoding(TKMP.Reader.MailReader)">
            <summary>
            Content-Transfer-Encoding を調べる
            </summary>
            <param name="Reader">メール解析クラス</param>
        </member>
        <member name="M:TKMP.Reader.Header.ContentType.ReadContentDisposition(TKMP.Reader.MailReader)">
            <summary>
            Content-Disposition　を調べる
            </summary>
        </member>
        <member name="P:TKMP.Reader.Header.ContentType.Types">
            <summary>
            MIMEタイプの読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Reader.Header.ContentType.SubType">
            <summary>
            MIMEのサブタイプの読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Reader.Header.ContentType.Charset">
            <summary>
            本文のキャラクターセットの読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Reader.Header.ContentType.Boundary">
            <summary>
            パートの区切り文字の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Reader.Header.ContentType.Name">
            <summary>
            パートの名前の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Reader.Header.ContentType.Encoding">
            <summary>
            パートエンコード方法の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Reader.Header.ContentType.Disposition">
            <summary>
            
            </summary>
        </member>
        <member name="P:TKMP.Reader.Header.ContentType.FileName">
            <summary>
            添付ファイルの名前の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Reader.Header.ContentType.PartialNumber">
            <summary>
            分割メールの断片番号の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Reader.Header.ContentType.PartialTotal">
            <summary>
            分割メールの断片数の読み出しを行います（分割メールのTotalの情報が存在しない場合は 0 を返します）
            </summary>
        </member>
        <member name="P:TKMP.Reader.Header.ContentType.PartialID">
            <summary>
            分割メールを識別するIDの読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Reader.Header.ContentType.MIMETypes">
            <summary>
            メール本文の形式
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.MIMETypes.Text">
            <summary>
            一般的なテキストファイルやHTMLファイル、リッチテキストなど
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.MIMETypes.Application">
            <summary>
            アプリケーションのデータファイル。ワープロや表計算ソフトのファイルなど
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.MIMETypes.Image">
            <summary>
            GIFやJPEGなどの画像ファイル
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.MIMETypes.Audio">
            <summary>
            WAVEやAUなどの音声ファイル
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.MIMETypes.Video">
            <summary>
            MPEGやQuickTimeなどの動画ファイル
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.MIMETypes.Model">
            <summary>
            2Dや3Dグラフィックスのためのオブジェクト・データ。RFC2077で追加されたもの
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.MIMETypes.Message">
            <summary>
            RFC822に準拠したメール・メッセージなど
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.MIMETypes.Multipart">
            <summary>
            マルチパート型メッセージ
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentType.MIMETypes.Unsupporting">
            <summary>
            未サポート
            </summary>
        </member>
        <member name="T:TKMP.Net.SearchKey.BODY">
            <summary>
            IMAPプロトコルのSEARCHコマンドでBODY検索を行うためのクラス。
            指定された文字列をメッセージのボディに含むメッセージ。 
            </summary>
        </member>
        <member name="M:TKMP.Net.SearchKey.BODY.#ctor(System.String)">
            <summary>
            新しいインスタンスを作成します
            </summary>
            <param name="value">検索する文字列</param>
        </member>
        <member name="M:TKMP.Net.SearchKey.BODY.GetSendData(TKMP.Net.SearchKeyBase.GetCommandMethod)">
            <summary>
            SEARCHコマンドで使用するコマンド文字列を読み出します。
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Net.SearchKey.BODY.Value">
            <summary>
            条件検索を行う文字列
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.CommandPack._Commands">
            <summary>
            一括して扱うコマンド
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.CommandPack.#ctor(System.Boolean,System.Boolean,TKMP.Imap.Command.CommandBase[])">
            <summary>
            コンストラクタ
            </summary>
            <param name="Background"></param>
            <param name="CommandCancel"></param>
            <param name="commands"></param>
        </member>
        <member name="M:TKMP.Imap.Command.CommandPack.CommandExecution">
            <summary>
            通信処理を開始する
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.CommandPack.Command_MessageSend(System.Object,TKMP.Net.MessageArgs)">
            <summary>
            送信メッセージイベントのリレー
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Imap.Command.CommandPack.Command_MessageReceive(System.Object,TKMP.Net.MessageArgs)">
            <summary>
            受信メッセージイベントのリレー
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:TKMP.Writer.Charsets">
            <summary>
            テキストのキャラクタセットの一覧
            </summary>
        </member>
        <member name="F:TKMP.Writer.Charsets.ShiftJIS">
            <summary>
            テキストShiftJISで処理します
            </summary>
        </member>
        <member name="F:TKMP.Writer.Charsets.JIS">
            <summary>
            テキストをJISで処理します
            </summary>
        </member>
        <member name="F:TKMP.Writer.Charsets.UTF8">
            <summary>
            テキストをUTF-8で処理します
            </summary>
        </member>
        <member name="T:TKMP.Writer.ContentTransferEncodings">
            <summary>
            テキストのエンコード方法の一覧
            </summary>
        </member>
        <member name="F:TKMP.Writer.ContentTransferEncodings.Auto">
            <summary>
            テキストのキャラクタセットにしたがって適切なエンコード方法を選択します
            </summary>
        </member>
        <member name="F:TKMP.Writer.ContentTransferEncodings.Bit7">
            <summary>
            テキストを7Bitで処理します
            </summary>
        </member>
        <member name="F:TKMP.Writer.ContentTransferEncodings.Bit8">
            <summary>
            テキストを8Bitで処理します
            </summary>
        </member>
        <member name="F:TKMP.Writer.ContentTransferEncodings.BASE64">
            <summary>
            テキストをBASE64で処理します
            </summary>
        </member>
        <member name="F:TKMP.Writer.ContentTransferEncodings.QuotedPrintable">
            <summary>
            テキストをQuotedPrintableで処理します
            </summary>
        </member>
        <member name="T:TKMP.Smtp.Command.STARTTLS">
            <summary>
            ＴＬＳ暗号化通信へ移行するためのコマンド
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.STARTTLS.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.STARTTLS.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Smtp.Command.QUIT">
            <summary>
            切断コマンドを発行します
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.QUIT.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.QUIT.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Pop.Command.NOOP">
            <summary>
            接続を維持するための何もしないコマンド
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.NOOP.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.NOOP.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Net.AuthPlain">
            <summary>
            SMTP AUTH PLAINでログオンを行うためのクラス 
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthPlain._UserID">
            <summary>
            ユーザーＩＤ
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthPlain._Password">
            <summary>
            パスワード
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthPlain._LogonProcess">
            <summary>
            ログオン処理の識別用
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthPlain._Logon">
            <summary>
            ログオン完了でtrue
            </summary>
        </member>
        <member name="M:TKMP.Net.AuthPlain.#ctor(System.String,System.String)">
            <summary>
            SMTP AUTH PLAINでログオンを行うためのクラスのインスタンスを初期化します
            </summary>
            <param name="UserID">ユーザーＩＤ</param>
            <param name="Password">パスワード</param>
        </member>
        <member name="M:TKMP.Net.AuthPlain.TKMP#Net#ISmtpLogon#Greeting(System.String)">
            <summary>
            接続の確立直後の送信メッセージをセットします。
            </summary>
            <param name="Receive">受信した文字列</param>
            <returns>送信文字列が返されます（送信文字列無しの時はNull）</returns>
        </member>
        <member name="M:TKMP.Net.AuthPlain.TKMP#Net#ISmtpLogon#Connection(System.String,System.String@,System.String@)">
            <summary>
            ログオン時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列が返されます（送信文字列無しの時はNull）</param>
            <param name="LogMessage">通信ログで表示する文字列が返されます。通常パスワードなど非表示としたい通信内容の場合に内容がセットされます。Sendを通信ログとする場合はNullがセットされます</param>
            <returns>ログオン処理を継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.AuthPlain.TKMP#Net#ISmtpLogon#Initialize">
            <summary>
            ログオン処理を最初からやり直すための初期化を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Net.AuthPlain.TKMP#Net#ISmtpLogon#Logon">
            <summary>
            ログオンが正常に行われたことを示す値読み出します
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.SEARCH">
            <summary>
            SEARCHコマンドを発行する
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.SEARCH._SearchKeyList">
            <summary>
            検索条件
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.SEARCH.#ctor(TKMP.Net.SearchKeyBase[])">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.SEARCH.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.SEARCH.GetCommand(TKMP.Net.SearchKeyBase.SendData)">
            <summary>
            検索条件の送信用文字列を作成する
            </summary>
            <param name="senddata"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Imap.Command.SEARCH.GetUID(TKMP.Net.SearchKeyBase.SendData)">
            <summary>
            単一検索処理を行う
            </summary>
            <param name="senddata"></param>
            <returns></returns>
        </member>
        <member name="P:TKMP.Imap.Command.SEARCH.UID">
            <summary>
            UIDの一覧
            </summary>
        </member>
        <member name="T:TKMP.Reader.PartCollection">
            <summary>
            サブパートを格納するコレクションクラス
            </summary>
        </member>
        <member name="M:TKMP.Reader.PartCollection.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Reader.PartCollection.Add(TKMP.Reader.MailReader)">
            <summary>
            サブパートを追加します
            </summary>
            <param name="NewPart"></param>
        </member>
        <member name="P:TKMP.Reader.PartCollection.Item(System.Int32)">
            <summary>
            格納しているサブパートクラスをインディックス指定で読み出します
            </summary>
        </member>
        <member name="P:TKMP.Reader.PartCollection.FileCount">
            <summary>
            コレクション内の添付ファイル数
            </summary>
        </member>
        <member name="P:TKMP.Reader.PartCollection.FileCollection">
            <summary>
            コレクション内添付されているファイル情報のクラスリスト
            </summary>
        </member>
        <member name="P:TKMP.Reader.PartCollection.FirstTextPart">
            <summary>
            サブパート内で最初に見つかったテキストパートを返す
            </summary>
        </member>
        <member name="T:TKMP.Pop.Command.RSET">
            <summary>
            メールデータに付けた削除フラグをリセットするためのコマンドを発行します
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.RSET.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.RSET.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Net.SmtpClient">
            <summary>
            ＳＭＴＰサーバーへの接続とメールの送信を行うクラスです
            </summary>
        </member>
        <member name="M:TKMP.Net.SmtpClient.OnMessageReceive(TKMP.Net.MessageArgs)">
            <summary>
             データ受信直後のイベントを発生します
            </summary>
            <param name="e">受信メッセージを格納しているデータクラス</param>
        </member>
        <member name="M:TKMP.Net.SmtpClient.OnMessageSend(TKMP.Net.MessageArgs)">
            <summary>
             データ送信直後のイベントを発生します
            </summary>
            <param name="e">受信メッセージを格納しているデータクラス</param>
        </member>
        <member name="M:TKMP.Net.SmtpClient.OnCertificateValidation(TKMP.Net.CertificateValidationArgs)">
            <summary>
            暗号化通信を行う場合に正当性が認められなかった証明書の検証を行うときのイベントを発生します
            </summary>
            <param name="e">証明書の検証を行うためのデータクラス</param>
        </member>
        <member name="F:TKMP.Net.SmtpClient._SmtpLogon">
            <summary>
            ログオン処理クラス
            </summary>
        </member>
        <member name="F:TKMP.Net.SmtpClient._HostName">
            <summary>
            接続先のホスト名
            </summary>
        </member>
        <member name="F:TKMP.Net.SmtpClient._Port">
            <summary>
            接続先ポート
            </summary>
        </member>
        <member name="F:TKMP.Net.SmtpClient._TimeOutInterval">
            <summary>
            タイムアウトまでの時間
            </summary>
        </member>
        <member name="F:TKMP.Net.SmtpClient._Connected">
            <summary>
            通信接続中にtrue
            </summary>
        </member>
        <member name="F:TKMP.Net.SmtpClient._MessageLog">
            <summary>
            メッセージログを記録するクラス
            </summary>
        </member>
        <member name="F:TKMP.Net.SmtpClient._Connection">
            <summary>
            コネクションクラス
            </summary>
        </member>
        <member name="F:TKMP.Net.SmtpClient._ThreadLockObject">
            <summary>
            スレッドの同期オブジェクト
            </summary>
        </member>
        <member name="F:TKMP.Net.SmtpClient._MaxMailSize">
            <summary>
            SMTPサーバーから得られた送信可能なメールのサイズ
            </summary>
        </member>
        <member name="F:TKMP.Net.SmtpClient._AuthenticationProtocol">
            <summary>
            通信で使用する暗号化の方法
            </summary>
        </member>
        <member name="F:TKMP.Net.SmtpClient._NecessaryResetCommand">
            <summary>
            送信時にリセットコマンドが必要なことを示す値
            </summary>
        </member>
        <member name="M:TKMP.Net.SmtpClient.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            ログオン手順が必要の無いＳＭＴＰクライアントクラスのインスタンスを初期化します
            </summary>
            <param name="Address">接続先を示すアドレス</param>
            <param name="Port">接続先サーバーのポート番号</param>
            <remarks>
            <para>クラスのインスタンスの作成には接続先を示すＩＰアドレス、ポート番号及び、接続時の手順を処理するためのISmtpLogonインターフェイスを持つクラスが必要です</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.SmtpClient.#ctor(System.String,System.Int32)">
            <summary>
            ログオン手順が必要の無いＳＭＴＰクライアントクラスのインスタンスを初期化します
            </summary>
            <param name="HostName">接続先のホスト名</param>
            <param name="Port">接続先サーバーのポート番号</param>
            <remarks>
            <para>クラスのインスタンスの作成には接続先を示すＩＰアドレス、ポート番号及び、接続時の手順を処理するためのISmtpLogonインターフェイスを持つクラスが必要です</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.SmtpClient.#ctor(System.Net.IPAddress,System.Int32,TKMP.Net.ISmtpLogon)">
            <summary>
            ＳＭＴＰクライアントクラスのインスタンスを初期化します
            </summary>
            <param name="Address">接続先を示すアドレス</param>
            <param name="Port">接続先サーバーのポート番号</param>
            <param name="SmtpLogon">ログオン処理を行うISmtpLogonクラス（nullを指定するとログオン処理は行われません）</param>
            <remarks>
            <para>クラスのインスタンスの作成には接続先を示すＩＰアドレス、ポート番号及び、接続時の手順を処理するためのISmtpLogonインターフェイスを持つクラスが必要です</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.SmtpClient.#ctor(System.String,System.Int32,TKMP.Net.ISmtpLogon)">
            <summary>
            ＳＭＴＰクライアントクラスのインスタンスを初期化します
            </summary>
            <param name="HostName">接続先のホスト名</param>
            <param name="Port">接続先サーバーのポート番号</param>
            <param name="SmtpLogon">ログオン処理を行うISmtpLogonクラス（nullを指定するとログオン処理は行われません）</param>
            <remarks>
            <para>クラスのインスタンスの作成には接続先を示すＩＰアドレス、ポート番号及び、接続時の手順を処理するためのISmtpLogonインターフェイスを持つクラスが必要です</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.SmtpClient.Connect">
            <summary>
            接続を開始します
            </summary>
            <returns>接続が正常に行えない場合falseを、接続が正常に行えた場合にtrueを返します</returns>
            <remarks>
            <para>ネットワークの接続確立後、ログオン処理までを行います。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.SmtpClient.Close">
            <summary>
            通信の切断処理を行います
            </summary>
        </member>
        <member name="M:TKMP.Net.SmtpClient.SendMail(TKMP.Writer.IMailWriter)">
            <summary>
            メールの送信を行います
            </summary>
            <param name="mailWriter">送信メールのデータクラス</param>
            <returns>正常にメール送信が行えた場合にTrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.SmtpClient._Connection_MessageSend(System.Object,TKMP.Net.MessageArgs)">
            <summary>
            データ送信イベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.SmtpClient._Connection_MessageReceive(System.Object,TKMP.Net.MessageArgs)">
            <summary>
            データ受信イベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.SmtpClient.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            ＳＳＬ認証の判定
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="E:TKMP.Net.SmtpClient.MessageReceive">
            <summary>
            データ受信直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Net.SmtpClient.MessageSend">
            <summary>
            データ送信直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Net.SmtpClient.CertificateValidation">
            <summary>
            暗号化通信を行う場合に正当性が認められなかった証明書の検証を行うときのイベント
            </summary>
        </member>
        <member name="P:TKMP.Net.SmtpClient.MaxMailSize">
            <summary>
            SMTPサーバーから得られた送信可能なメールのサイズの読み出しを行ないます
            </summary>
            <remarks>
            <para>すべてのSMTPサーバーがこの情報を返すわけではありません。</para>
            <para>サイズ情報が取得できない場合この値はint32の最大値になります。また、未接続時には0を返します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.SmtpClient.MessageLog">
            <summary>
            メッセージのログを記録するクラスの読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.SmtpClient.HostName">
            <summary>
            接続先のホスト名の読み出しと設定を行います
            </summary>
        </member>
        <member name="P:TKMP.Net.SmtpClient.TimeOutInterval">
            <summary>
            送受信がタイムアウトする時間（秒単位）の設定と読み出しを行います
            </summary>
            <remarks>
            <para>送信に対する受信待ちの時間を設定します</para>
            <para>デフォルト値は２０秒です</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.SmtpClient.AuthenticationProtocol">
            <summary>
            通信で使用する暗号化の方法の読み出しと設定を行います
            </summary>
        </member>
        <member name="P:TKMP.Net.SmtpClient.IsEncrypted">
            <summary>
            現在の通信が暗号化されていることを示す値の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.SmtpClient.Connected">
            <summary>
            通信が確立している事を表す値を読み出します
            </summary>
            <remarks>
            <para><see cref="M:TKMP.Net.SmtpClient.Connect">Connectメソッド</see>の実行後に正常にログオン作業が終了するとtrueを返します</para>
            </remarks>
        </member>
        <member name="T:TKMP.Imap.Command.LIST">
            <summary>
            LISTコマンドを発行する
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.LIST.Root">
            <summary>
            ルート情報の読出しを行う事を示す値
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.LIST.#ctor(System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.LIST.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="P:TKMP.Imap.Command.LIST.FolderListString">
            <summary>
            取得したフォルダ一覧の読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Net.SearchKey.KEYWORD">
            <summary>
            IMAPプロトコルのSEARCHコマンドでKEYWORD検索を行うためのクラス
            指定されたキーワードが設定されたメッセージ。
            </summary>
        </member>
        <member name="M:TKMP.Net.SearchKey.KEYWORD.#ctor(System.String)">
            <summary>
            新しいインスタンスを作成します
            </summary>
            <param name="value">検索する文字列</param>
        </member>
        <member name="M:TKMP.Net.SearchKey.KEYWORD.GetSendData(TKMP.Net.SearchKeyBase.GetCommandMethod)">
            <summary>
            SEARCHコマンドで使用するコマンド文字列を読み出します。
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Net.SearchKey.KEYWORD.Value">
            <summary>
            条件検索を行う文字列
            </summary>
        </member>
        <member name="T:TKMP.Net.SearchKey.NOT">
            <summary>
            IMAPプロトコルの否定検索を行うためのクラス
            </summary>
        </member>
        <member name="M:TKMP.Net.SearchKey.NOT.#ctor(TKMP.Net.SearchKeyBase)">
            <summary>
            新しいインスタンスを作成します
            </summary>
            <param name="search">検索条件1</param>
        </member>
        <member name="M:TKMP.Net.SearchKey.NOT.GetSendData(TKMP.Net.SearchKeyBase.GetCommandMethod)">
            <summary>
            SEARCHコマンドで使用するコマンド文字列を読み出します。
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Net.SearchKey.NOT.Search">
            <summary>
            条件
            </summary>
        </member>
        <member name="T:TKMP.Enum.SupportCommandAns">
            <summary>
            コマンドのサポート状況
            </summary>
        </member>
        <member name="F:TKMP.Enum.SupportCommandAns.Enable">
            <summary>
            使用可能
            </summary>
        </member>
        <member name="F:TKMP.Enum.SupportCommandAns.Disable">
            <summary>
            使用不可
            </summary>
        </member>
        <member name="F:TKMP.Enum.SupportCommandAns.none">
            <summary>
            不明
            </summary>
        </member>
        <member name="T:TKMP.Const">
            <summary>
            Const の概要の説明です。
            </summary>
        </member>
        <member name="F:TKMP.Const.DefaultEncodingName">
            <summary>
            標準の日本語エンコードタイプ
            </summary>
        </member>
        <member name="F:TKMP.Const.DefaultEncoding">
            <summary>
            標準の日本語エンコード
            </summary>
        </member>
        <member name="F:TKMP.Const.HeaderJoinChar">
            <summary>
            ヘッダのエンコード用の行接続文字
            </summary>
        </member>
        <member name="F:TKMP.Const.HeaderNewLine">
            <summary>
            ヘッダのエンコード用の行終端文字
            </summary>
        </member>
        <member name="F:TKMP.Const._MailAddressPatternString">
            <summary>
            メールアドレスを表す正規表現
            </summary>
        </member>
        <member name="M:TKMP.Const.CharSplit(System.String@,System.Char,System.String@,System.String@)">
            <summary>
            文字列を指定キャラクタで二つに区切る
            </summary>
            <param name="InString">対象文字列</param>
            <param name="CheckChar">区切りキャラクタ</param>
            <param name="LeftString">区切り前部分</param>
            <param name="RightString">区切り後ろ部分</param>
        </member>
        <member name="P:TKMP.Const.MailAddressPatternString">
            <summary>
            メールアドレスを表す正規表現の読み出しを行う
            </summary>
        </member>
        <member name="T:TKMP.Smtp.Rcpt_to_ResponseException">
            <summary>
            あて先登録に失敗したときに発生する例外
            </summary>
        </member>
        <member name="T:TKMP.Smtp.CommandResponseException">
            <summary>
            送受信処理で発生する例外
            </summary>
        </member>
        <member name="F:TKMP.Smtp.CommandResponseException.ResponseNumber">
            <summary>
            レスポンスコード中の番号
            </summary>
        </member>
        <member name="F:TKMP.Smtp.CommandResponseException.SendMessage">
            <summary>
            このエラーの元になった送信メッセージ
            </summary>
        </member>
        <member name="F:TKMP.Smtp.CommandResponseException.ReceiveMessage">
            <summary>
            このエラーの元になった受信メッセージ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.CommandResponseException.#ctor(TKMP.Smtp.CommandExceptionData)">
            <summary>
            例外のインスタンスを初期化します
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:TKMP.Smtp.Rcpt_to_ResponseException.MailAddress">
            <summary>
            登録に失敗したメールアドレス
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Rcpt_to_ResponseException.#ctor(TKMP.Smtp.CommandExceptionData,System.String)">
            <summary>
            例外のインスタンスを初期化します
            </summary>
            <param name="data"></param>
            <param name="mailaddress"></param>
        </member>
        <member name="T:TKMP.Smtp.CommandExceptionData">
            <summary>
            通信コマンド共通の例外
            </summary>
        </member>
        <member name="F:TKMP.Smtp.CommandExceptionData._ResponseNumber">
            <summary>
            レスポンスコード
            </summary>
        </member>
        <member name="F:TKMP.Smtp.CommandExceptionData.ResponseNumber">
            <summary>
            レスポンスコード中の番号
            </summary>
        </member>
        <member name="F:TKMP.Smtp.CommandExceptionData.SendMessage">
            <summary>
            このエラーの元になった送信メッセージ
            </summary>
        </member>
        <member name="F:TKMP.Smtp.CommandExceptionData.ReceiveMessage">
            <summary>
            このエラーの元になった受信メッセージ
            </summary>
        </member>
        <member name="F:TKMP.Smtp.CommandExceptionData.ErrorMessage">
            <summary>
            このエラーのメッセージ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.CommandExceptionData.#ctor(TKMP.Smtp.Command.ResponseCode,System.String,System.String)">
            <summary>
            例外のインスタンスを初期化します
            </summary>
            <param name="Response"></param>
            <param name="ErrorMessage"></param>
            <param name="SendMessage"></param>
        </member>
        <member name="T:TKMP.Smtp.Command.Command_Logon">
            <summary>
            ログオン処理を実行します
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Logon.SIZE_PATTERN">
            <summary>
            SIZE情報の読み取り用正規表現パターン
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Logon.STARTTLS_PATTERN">
            <summary>
            STARTTLS情報の読み取り用正規表現パターン
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Logon.SIZE_REGEX">
            <summary>
            SIZE情報の読み取り用正規表現クラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Logon.STARTTLS_REGEX">
            <summary>
            STARTTLS情報の読み取り用正規表現クラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Logon._GreetingClass">
            <summary>
            初期の接続を処理したクラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Command.Command_Logon._SmtpLogon">
            <summary>
            ログオン処理クラス
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.Command_Logon.#ctor(TKMP.Net.ISmtpLogon,TKMP.Smtp.Command.Command_Greeting)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.Command_Logon.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Command.Command_Logon.Logon(System.String)">
            <summary>
            ログオン処理
            </summary>
            <returns></returns>
        </member>
        <member name="T:TKMP.Reader.Header.ContentParameterCollection">
            <summary>
            Content内のすべてのパラメータ情報のコレクション
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ContentParameterCollection._Parameters">
            <summary>
            パラメータのコレクション
            </summary>
        </member>
        <member name="M:TKMP.Reader.Header.ContentParameterCollection.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Reader.Header.ContentParameterCollection.Add(System.String,TKMP.Reader.Header.ParameterData)">
            <summary>
            パラメータパーツを追加する
            </summary>
            <param name="ParameterName"></param>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Reader.Header.ContentParameterCollection.GetData(System.String,System.String)">
            <summary>
            パラメータ情報を取り出す
            </summary>
            <param name="ParameterName"></param>
            <param name="Default"></param>
            <returns></returns>
        </member>
        <member name="T:TKMP.Reader.Header.ParameterCollection">
            <summary>
            Content内のパラメータ情報の結合処理用コレクション
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ParameterCollection.Name">
            <summary>
            パラメータの名称
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ParameterCollection._Datas">
            <summary>
            パーツのコレクション
            </summary>
        </member>
        <member name="M:TKMP.Reader.Header.ParameterCollection.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:TKMP.Reader.Header.ParameterCollection.Add(TKMP.Reader.Header.ParameterData)">
            <summary>
            パラメータパーツを追加する
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:TKMP.Reader.Header.ParameterCollection.GetData">
            <summary>
            パラメータのテキストを取り出す
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKMP.Reader.Header.ParameterCollection.DataDecode(System.String[],System.String@,System.String@)">
            <summary>
            RFC2231でのデコード処理を行う
            </summary>
            <param name="sources"></param>
            <param name="DefaultEnc"></param>
            <param name="DefaultLang"></param>
            <returns></returns>
        </member>
        <member name="T:TKMP.Reader.Header.ParameterData">
            <summary>
            Content内のパラメータ詳細情報を格納するクラス
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ParameterData.Number">
            <summary>
            連結番号
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ParameterData.RFC2231Lang">
            <summary>
            RFC2231エンコードを識別する値
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.ParameterData.Source">
            <summary>
            保持テキスト
            </summary>
        </member>
        <member name="M:TKMP.Reader.Header.ParameterData.#ctor(System.Int32,System.Boolean,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Number"></param>
            <param name="RFC2231Lang"></param>
            <param name="Source"></param>
        </member>
        <member name="T:TKMP.Net.SearchKey.SUBJECT">
            <summary>
            IMAPプロトコルのSEARCHコマンドでSUBJECT検索を行うためのクラス。
            指定された文字列をエンベロープ構造の SUBJECT フィールドに含むメッセージ。
            </summary>
        </member>
        <member name="M:TKMP.Net.SearchKey.SUBJECT.#ctor(System.String)">
            <summary>
            新しいインスタンスを作成します
            </summary>
            <param name="value">検索する文字列</param>
        </member>
        <member name="M:TKMP.Net.SearchKey.SUBJECT.GetSendData(TKMP.Net.SearchKeyBase.GetCommandMethod)">
            <summary>
            SEARCHコマンドで使用するコマンド文字列を読み出します。
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Net.SearchKey.SUBJECT.Value">
            <summary>
            条件検索を行う文字列
            </summary>
        </member>
        <member name="T:TKMP.Common.EventSyncQueue">
             <summary>
            非同期実行時のイベントを保存するキュー
             </summary>
        </member>
        <member name="F:TKMP.Common.EventSyncQueue._EventSyncQueue">
            <summary>
            非同期実行時のイベントを保存するキュー
            </summary>
        </member>
        <member name="M:TKMP.Common.EventSyncQueue.Enqueue(TKMP.Common.EventSyncQueue.EventData)">
            <summary>
            データを追加します
            </summary>
            <param name="EventData"></param>
        </member>
        <member name="M:TKMP.Common.EventSyncQueue.Dequeue">
            <summary>
            データを取り出す
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Common.EventSyncQueue.Count">
            <summary>
            キューにあるデータの数を返す
            </summary>
        </member>
        <member name="T:TKMP.Common.EventSyncQueue.EventData">
            <summary>
            イベントデータの格納クラス
            </summary>
        </member>
        <member name="F:TKMP.Common.EventSyncQueue.EventData.Type">
            <summary>
            メッセージのタイプ
            </summary>
        </member>
        <member name="F:TKMP.Common.EventSyncQueue.EventData.e">
            <summary>
            イベントデータ
            </summary>
        </member>
        <member name="M:TKMP.Common.EventSyncQueue.EventData.#ctor(TKMP.Common.EventSyncQueue.EventData.Types,TKMP.Net.MessageArgs)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Type"></param>
            <param name="e"></param>
        </member>
        <member name="T:TKMP.Common.EventSyncQueue.EventData.Types">
            <summary>
            メッセージのタイプ
            </summary>
        </member>
        <member name="F:TKMP.Common.EventSyncQueue.EventData.Types.Send">
            <summary>
            送信メッセージ
            </summary>
        </member>
        <member name="F:TKMP.Common.EventSyncQueue.EventData.Types.Receive">
            <summary>
            受信メッセージ
            </summary>
        </member>
        <member name="T:TKMP.Transfer.TransferBase64">
            <summary>
            ＢＡＳＥ６４の処理クラス
            </summary>
        </member>
        <member name="M:TKMP.Transfer.TransferBase64.TKMP#Transfer#ITransfer#Decoding(System.Byte[])">
            <summary>
            デコード処理
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後のバイト配列</returns>
        </member>
        <member name="M:TKMP.Transfer.TransferBase64.TKMP#Transfer#ITransfer#Encoding(System.Byte[])">
            <summary>
            エンコード処理を行います
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="M:TKMP.Transfer.TransferBase64.TKMP#Transfer#ITransfer#BodyEncoding(System.Byte[])">
            <summary>
            本文のエンコード処理を行います。変換結果は複数行になりリターンコードが挿入されます
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="M:TKMP.Transfer.TransferBase64.TKMP#Transfer#ITransfer#BodyEncodingByte(System.Byte[])">
            <summary>
            本文のエンコード処理を行います。変換結果は複数行になりリターンコードが挿入されます
            </summary>
            <param name="Source">変換前のバイト配列</param>
            <returns>変換後の文字列</returns>
        </member>
        <member name="P:TKMP.Transfer.TransferBase64.TKMP#Transfer#ITransfer#EncodingName">
            <summary>
            エンコード処理の名称の読出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Reader.Header.DateTime">
            <summary>
            MailReader内の送信日時の解析を行うクラス
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.DateTime._DateTime">
            <summary>
            解析した日時
            </summary>
        </member>
        <member name="F:TKMP.Reader.Header.DateTime._Error">
            <summary>
            解析に失敗したときにtrue
            </summary>
        </member>
        <member name="M:TKMP.Reader.Header.DateTime.#ctor(TKMP.Reader.MailReader)">
            <summary>
            送信日時の解析を行うクラスのインスタンスを初期化します
            </summary>
            <param name="Reader">メールデータ解析クラス</param>
        </member>
        <member name="M:TKMP.Reader.Header.DateTime.GetDateTime(TKMP.Reader.MailReader)">
            <summary>
            日時の変換
            </summary>
            <param name="Reader">メール解析クラス</param>
        </member>
        <member name="M:TKMP.Reader.Header.DateTime.DateStringCheck(System.String)">
            <summary>
            日時を表す文字列から日付型に変換
            </summary>
            <param name="DateString">日時を表す文字列</param>
            <returns>日付型</returns>
        </member>
        <member name="P:TKMP.Reader.Header.DateTime.Value">
            <summary>
            送信日時の読み出しを行います
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Reader.Header.DateTime.Error">
            <summary>
            解析エラーのフラグを返す
            </summary>
        </member>
        <member name="T:TKMP.Pop.Command.UIDL">
            <summary>
            ＵＩＤ一覧を取得するコマンド
            </summary>
        </member>
        <member name="F:TKMP.Pop.Command.UIDL._UIDString">
            <summary>
            取得したUID一覧
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.UIDL.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.UIDL.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="P:TKMP.Pop.Command.UIDL.UIDString">
            <summary>
            取得したUID一覧の読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Pop.Command.QUIT">
            <summary>
            切断コマンドを発行します
            </summary>
        </member>
        <member name="F:TKMP.Pop.Command.QUIT._PopLogon">
            <summary>
            ログオン処理クラス
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.QUIT.#ctor(TKMP.Net.IPopLogon,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.QUIT.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Net.BasicPopLogon">
            <summary>
            ＰＯＰ３サーベーへ接続するときの最も基本的な認証方法を提供するクラス
            </summary>
        </member>
        <member name="F:TKMP.Net.BasicPopLogon._UserID">
            <summary>
            ユーザーＩＤ
            </summary>
        </member>
        <member name="F:TKMP.Net.BasicPopLogon._Password">
            <summary>
            パスワード
            </summary>
        </member>
        <member name="F:TKMP.Net.BasicPopLogon._LogonProcess">
            <summary>
            ログオン処理の識別用
            </summary>
        </member>
        <member name="F:TKMP.Net.BasicPopLogon._Logon">
            <summary>
            ログオン完了でtrue
            </summary>
        </member>
        <member name="M:TKMP.Net.BasicPopLogon.#ctor(System.String,System.String)">
            <summary>
            基本的な認証方法を処理するクラスのインスタンスを初期化します
            </summary>
            <param name="UserID">ユーザーＩＤ</param>
            <param name="Password">パスワード</param>
        </member>
        <member name="M:TKMP.Net.BasicPopLogon.TKMP#Net#IPopLogon#Connection(System.String,System.String@)">
            <summary>
            ログオン時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列（送信文字列無しの時はNull）</param>
            <returns>ログオン処理が継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.BasicPopLogon.TKMP#Net#IPopLogon#Exit(System.String,System.String@)">
            <summary>
            切断時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列（送信文字列無しの時はNull）</param>
            <returns>切断処理が継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.BasicPopLogon.TKMP#Net#IPopLogon#Initialize">
            <summary>
            ログオン処理を最初からやり直すための初期化を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Net.BasicPopLogon.TKMP#Net#IPopLogon#Logon">
            <summary>
            ログオンが正常に行われたことを示す値を読み出す
            </summary>
        </member>
        <member name="T:TKMP.Net.SearchKey.HEADER">
            <summary>
            IMAPプロトコルのSEARCHコマンドでHEADER検索を行うためのクラス。
            指定された ヘッダフィールドで、指定された文字列を含むヘッダーを持つメッセージ。 
            </summary>
        </member>
        <member name="M:TKMP.Net.SearchKey.HEADER.#ctor(System.String,System.String)">
            <summary>
            新しいインスタンスを作成します
            </summary>
            <param name="filedname">ヘッダフィールドの文字列</param>
            <param name="value">検索する文字列</param>
        </member>
        <member name="M:TKMP.Net.SearchKey.HEADER.GetSendData(TKMP.Net.SearchKeyBase.GetCommandMethod)">
            <summary>
            SEARCHコマンドで使用するコマンド文字列を読み出します。
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Net.SearchKey.HEADER.Value">
            <summary>
            条件検索を行う文字列
            </summary>
        </member>
        <member name="P:TKMP.Net.SearchKey.HEADER.FieldName">
            <summary>
            条件検索を行うヘッダーフィールド名
            </summary>
        </member>
        <member name="T:TKMP.Net.PopClient">
            <summary>
            ＰＯＰ３サーバーへの接続処理と受信メール一覧の読み出しを行います
            </summary>
        </member>
        <member name="M:TKMP.Net.PopClient.OnMessageReceive(TKMP.Net.MessageArgs)">
            <summary>
             データ受信直後のイベントを発生します
            </summary>
            <param name="e">受信メッセージを格納しているデータクラス</param>
        </member>
        <member name="M:TKMP.Net.PopClient.OnMessageSend(TKMP.Net.MessageArgs)">
            <summary>
             データ送信直後のイベントを発生します
            </summary>
            <param name="e">受信メッセージを格納しているデータクラス</param>
        </member>
        <member name="M:TKMP.Net.PopClient.OnCertificateValidation(TKMP.Net.CertificateValidationArgs)">
            <summary>
            暗号化通信を行う場合に正当性が認められなかった証明書の検証を行うときのイベントを発生します
            </summary>
            <param name="e">証明書の検証を行うためのデータクラス</param>
        </member>
        <member name="F:TKMP.Net.PopClient._PopLogon">
            <summary>
            ログオン処理クラス
            </summary>
        </member>
        <member name="F:TKMP.Net.PopClient._HostName">
            <summary>
            接続先のホスト名
            </summary>
        </member>
        <member name="F:TKMP.Net.PopClient._Port">
            <summary>
            接続先ポート
            </summary>
        </member>
        <member name="F:TKMP.Net.PopClient._Connection">
            <summary>
            コネクションクラス
            </summary>
        </member>
        <member name="F:TKMP.Net.PopClient._Connected">
            <summary>
            通信接続中にtrue
            </summary>
        </member>
        <member name="F:TKMP.Net.PopClient._Mails">
            <summary>
            メールデータクラス
            </summary>
        </member>
        <member name="F:TKMP.Net.PopClient._TimeOutInterval">
            <summary>
            タイムアウトまでの時間
            </summary>
        </member>
        <member name="F:TKMP.Net.PopClient._KeepAliveInterval">
            <summary>
            KeepAliveを発行する間隔
            </summary>
        </member>
        <member name="F:TKMP.Net.PopClient._KeepAlive">
            <summary>
            KeepAliveを有効にする
            </summary>
        </member>
        <member name="F:TKMP.Net.PopClient._MessageLog">
            <summary>
            メッセージログを記録するクラス
            </summary>
        </member>
        <member name="F:TKMP.Net.PopClient._ThreadLockObject">
            <summary>
            スレッドの同期オブジェクト
            </summary>
        </member>
        <member name="F:TKMP.Net.PopClient._AuthenticationProtocol">
            <summary>
            通信で使用する暗号化の方法
            </summary>
        </member>
        <member name="M:TKMP.Net.PopClient.#ctor(TKMP.Net.IPopLogon,System.Net.IPAddress,System.Int32)">
            <summary>
            ＰＯＰクライアントクラスのインスタンスを初期化します
            </summary>
            <param name="PopLogon">ログオン処理を行うIPopLogonクラス</param>
            <param name="Address">接続先を示すアドレス</param>
            <param name="Port">接続先サーバーのポート番号</param>
            <remarks>
            <para>クラスのインスタンスの作成には接続先を示すＩＰアドレス、ポート番号及び、接続時の手順を処理するためのIPopLogonインターフェイスを持つクラスが必要です</para>
            <para>標準のログオン手続きと、APOPでのログオン手続きは、<see cref="T:TKMP.Net.BasicPopLogon">BasicPopLogonクラス</see>、<see cref="T:TKMP.Net.APopLogon">APopLogonクラス</see>を使用する事が出来ます</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.PopClient.#ctor(TKMP.Net.IPopLogon,System.String,System.Int32)">
            <summary>
            ＰＯＰクライアントクラスのインスタンスを初期化します
            </summary>
            <param name="PopLogon">ログオン処理を行うIPopLogonクラス</param>
            <param name="HostName">接続先のホスト名</param>
            <param name="Port">接続先サーバーのポート番号</param>
            <remarks>
            <para>クラスのインスタンスの作成には接続先を示すＩＰアドレス、ポート番号及び、接続時の手順を処理するためのIPopLogonインターフェイスを持つクラスが必要です</para>
            <para>標準のログオン手続きと、APOPでのログオン手続きは、<see cref="T:TKMP.Net.BasicPopLogon">BasicPopLogonクラス</see>、<see cref="T:TKMP.Net.APopLogon">APopLogonクラス</see>を使用する事が出来ます</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.PopClient.ConnectInit(System.String@)">
            <summary>
            接続の共通初期処理
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.PopClient.Connect">
            <summary>
            接続を開始します
            </summary>
            <returns>接続が正常に行えない場合falseを、受信メールが正常に読み出せた場合にtrueを返します</returns>
            <remarks>
            <para>ネットワークの接続確立後、ログオン処理、メールデータの一覧取得までを行います。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.PopClient.CheckLogon">
            <summary>
            Pop Before SMTP接続確認用
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.PopClient.Close">
            <summary>
            通信の切断処理を行います
            </summary>
        </member>
        <member name="M:TKMP.Net.PopClient.CloseAnsync">
            <summary>
            通信の切断処理を非同期で行います
            </summary>
        </member>
        <member name="M:TKMP.Net.PopClient.GetMailStatus(System.String,System.String)">
            <summary>
            メールのステータス解析
            </summary>
            <param name="UIDString"></param>
            <param name="SizeString"></param>
        </member>
        <member name="M:TKMP.Net.PopClient.GetMailList">
            <summary>
            メールボックス内のメールデータの一覧の読み出しを行います
            </summary>
            <remarks>
            <para>現在メールボックスにあるメールデータの一覧を返します。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Net.PopClient.ResetDelete">
            <summary>
            メールデータに付けた削除フラグをリセットします
            </summary>
            <returns>正常に終了するとtrueを返す</returns>
        </member>
        <member name="M:TKMP.Net.PopClient._Connection_MessageSend(System.Object,TKMP.Net.MessageArgs)">
            <summary>
            データ送信イベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.PopClient._Connection_MessageReceive(System.Object,TKMP.Net.MessageArgs)">
            <summary>
            データ受信イベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.PopClient._Connection_RequestKeepAlive(System.Object,System.EventArgs)">
            <summary>
            接続維持のためのコマンドを発行する
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.PopClient.QUIT_ExecutionEnd(System.Object,System.EventArgs)">
            <summary>
            サーバーからのＱＵＩＴ処理の終了イベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Net.PopClient.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            ＳＳＬ認証の判定
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="E:TKMP.Net.PopClient.MessageReceive">
            <summary>
            データ受信直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Net.PopClient.MessageSend">
            <summary>
            データ送信直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Net.PopClient.CertificateValidation">
            <summary>
            暗号化通信を行う場合に正当性が認められなかった証明書の検証を行うときのイベント
            </summary>
        </member>
        <member name="P:TKMP.Net.PopClient.MailDatas">
            <summary>
            メールボックス内のメールデータの一覧の読み出しを行います
            </summary>
            <remarks>
            <para>現在メールボックスにあるメールデータの一覧を返します。</para>
            <para>この段階ではまだメールデータの受信は行っていません。メールの受信等の処理はこの一覧から取得した<see cref="T:TKMP.Net.MailData">MailDataクラス</see>で行ってください。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.PopClient.TimeOutInterval">
            <summary>
            送受信がタイムアウトする時間（秒単位）の設定と読み出しを行います
            </summary>
            <remarks>
            <para>送信に対する受信待ちの時間を設定します</para>
            <para>デフォルト値は２０秒です</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.PopClient.KeepAliveInterval">
            <summary>
            接続を維持するためのコマンドを送信する時間（秒単位）の設定と読み出しを行います
            </summary>
            <remarks>
            <para>接続を維持するためのコマンドを送信する時間を設定します</para>
            <para>デフォルト値は３０秒です</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.PopClient.KeepAlive">
            <summary>
            接続を維持するための処理を有効にします
            </summary>
            <remarks>
            <para>このプロパティをtrueにすると、一定時間ごとに「noop」コマンドがＰＯＰサーバーに送信されます</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.PopClient.Connected">
            <summary>
            通信が確立している事を表す値を読み出します
            </summary>
            <remarks>
            <para><see cref="M:TKMP.Net.PopClient.Connect">Connectメソッド</see>の実行後に正常にログオン作業が終了するとtrueを返します</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.PopClient.MessageLog">
            <summary>
            メッセージのログを記録するクラスの読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.PopClient.Connection">
            <summary>
            接続中のコネクションクラスを返す
            </summary>
        </member>
        <member name="P:TKMP.Net.PopClient.AuthenticationProtocol">
            <summary>
            通信で使用する暗号化の方法の読み出しと設定を行います
            </summary>
        </member>
        <member name="P:TKMP.Net.PopClient.IsEncrypted">
            <summary>
            現在の通信が暗号化されていることを示す値の読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.PopClient.HostName">
            <summary>
            接続先のホスト名の読み出を行います
            </summary>
        </member>
        <member name="T:TKMP.Writer.Header.HeaderCollection">
            <summary>
            ヘッダ情報の格納専用コレクションクラス
            </summary>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderCollection.#ctor">
            <summary>
            ヘッダ情報の格納専用コレクションクラスの新しいインスタンスを作成します。
            </summary>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderCollection.Add(TKMP.Writer.Header.HeaderString)">
            <summary>
            ヘッダフィールドを追加します（既に同一名称がある場合は上書きします）
            </summary>
            <param name="Data">ヘッダデータの格納クラス</param>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderCollection.Add(TKMP.Writer.Header.HeaderString,System.String)">
            <summary>
            ヘッダフィールドを追加します（既に同一名称がある場合は上書きします）
            </summary>
            <param name="Data">ヘッダデータの格納クラス</param>
            <param name="EncodeCharset">エンコードを行なう文字コード</param>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderCollection.Add(TKMP.Writer.Header.HeaderString,System.Text.Encoding)">
            <summary>
            ヘッダフィールドを追加します（既に同一名称がある場合は上書きします）
            </summary>
            <param name="Data">ヘッダデータの格納クラス</param>
            <param name="Encoding"></param>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderCollection.Add(System.String,System.String)">
            <summary>
            ヘッダフィールドを追加します（既に同一名称がある場合は上書きします）
            </summary>
            <param name="Name">ヘッダのエントリ名</param>
            <param name="Data">ヘッダデータ</param>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderCollection.Add(System.String,System.String,System.String)">
            <summary>
            ヘッダフィールドを追加します（既に同一名称がある場合は上書きします）
            </summary>
            <param name="Name">ヘッダのエントリ名</param>
            <param name="Data">ヘッダデータ</param>
            <param name="EncodeCharset">エンコードを行なう文字コード</param>
        </member>
        <member name="M:TKMP.Writer.Header.HeaderCollection.HeaderItem(System.String)">
            <summary>
            ヘッダ情報の格納クラスを返す
            </summary>
            <param name="HeaderCode">ヘッダのフィールド名</param>
            <returns>ヘッダ情報を格納しているクラス</returns>
            <remarks>
            <para>ヘッダ情報の一覧から[HeaderCode]を示すヘッダ情報クラスを返します。</para>
            <para>該当するヘッダ情報クラスが存在しない場合はnullを返します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Writer.Header.HeaderCollection.Item(System.String)">
            <summary>
            格納しているヘッダ情報クラスをインディックス指定で読み出します
            </summary>
        </member>
        <member name="T:TKMP.Reader.File">
            <summary>
            添付ファイルを管理するクラス
            </summary>
        </member>
        <member name="F:TKMP.Reader.File._FileData">
            <summary>
            ファイルデータ
            </summary>
        </member>
        <member name="F:TKMP.Reader.File._Transfer">
            <summary>
            使用するデコーダー
            </summary>
        </member>
        <member name="F:TKMP.Reader.File._Source">
            <summary>
            変換前のデータ
            </summary>
        </member>
        <member name="F:TKMP.Reader.File._FileName">
            <summary>
            ファイル名
            </summary>
        </member>
        <member name="M:TKMP.Reader.File.#ctor(System.IO.Stream,TKMP.Reader.Header.ContentType)">
            <summary>
            コンストラクタ
            </summary>
            <param name="sr">データストリーム</param>
            <param name="ContentType">ヘッダデータ</param>
        </member>
        <member name="M:TKMP.Reader.File.GetData(System.Int32,System.Int32)">
            <summary>
            指定範囲のバイト配列を返す
            </summary>
            <param name="Start">読み出しを開始するバイト位置</param>
            <param name="Length">読み出しを行うバイトサイズ</param>
            <returns>読み出したデータのバイト配列</returns>
        </member>
        <member name="M:TKMP.Reader.File.FileDecoding">
            <summary>
            添付ファイルデータのデコード処理
            </summary>
        </member>
        <member name="M:TKMP.Reader.File.FileSave(System.String)">
            <summary>
            添付ファイルの保存を行います
            </summary>
            <param name="Path">展開フォルダの場所</param>
            <remarks>
            <para>指定したパスに添付ファイルを保存します。ファイル名は解析時に取得した名前になります。</para>
            </remarks>
        </member>
        <member name="M:TKMP.Reader.File.FileSave(System.String,System.String)">
            <summary>
            添付ファイルの保存を行います
            </summary>
            <param name="Path">展開フォルダの場所</param>
            <param name="FileName">保存ファイル名</param>
            <remarks>
            <para>指定したパスにファイル名を指定して添付ファイルを保存します。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Reader.File.FileName">
            <summary>
            ファイル名の読み出しを行う
            </summary>
        </member>
        <member name="P:TKMP.Reader.File.FileSize">
            <summary>
            ファイルサイズの読み出しを行う
            </summary>
        </member>
        <member name="T:TKMP.Pop.Command.LIST">
            <summary>
            メールのサイズ一覧を取得するコマンド
            </summary>
        </member>
        <member name="F:TKMP.Pop.Command.LIST._SizeString">
            <summary>
            取得したサイズ一覧
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.LIST.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.LIST.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="P:TKMP.Pop.Command.LIST.SizeString">
            <summary>
            取得したサイズ一覧の読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Pop.Command.Command_Connect">
            <summary>
            接続時の処理をするコマンド
            </summary>
        </member>
        <member name="F:TKMP.Pop.Command.Command_Connect._ConnectionString">
            <summary>
            接続時のサーバーメッセージ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.Command_Connect.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.Command_Connect.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="P:TKMP.Pop.Command.Command_Connect.ConnectionString">
            <summary>
            接続時のサーバーメッセージの読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Net.MailBoxFlags">
            <summary>
            メールボックスの情報から取得した属性の列挙型です
            </summary>
        </member>
        <member name="F:TKMP.Net.MailBoxFlags.none">
            <summary>
            属性を持たない
            </summary>
        </member>
        <member name="F:TKMP.Net.MailBoxFlags.Noinferiors">
            <summary>
            このメールボックス／フォルダ以下には、子階層や子メールボックスを作ることができない
            </summary>
        </member>
        <member name="F:TKMP.Net.MailBoxFlags.Noselect">
            <summary>
            このメールボックスは選択することができない
            </summary>
        </member>
        <member name="F:TKMP.Net.MailBoxFlags.Marked">
            <summary>
            新規の到着メールがある
            </summary>
        </member>
        <member name="F:TKMP.Net.MailBoxFlags.Unmarked">
            <summary>
            到着メールはない
            </summary>
        </member>
        <member name="F:TKMP.Net.MailBoxFlags.HasNoChildren">
            <summary>
            子階層や子メールボックスを持たない
            </summary>
        </member>
        <member name="F:TKMP.Net.MailBoxFlags.HasChildren">
            <summary>
            子階層や子メールボックスを持つ
            </summary>
        </member>
        <member name="T:TKMP.Net.Mailbox">
            <summary>
            メールボックスの情報クラス
            </summary>
            <remarks>
            <para>IMAPプロトコルで操作するメールボックスの情報を持つクラスです。</para>
            </remarks>
            <summary>
            メールボックスの情報クラス
            </summary>
            <remarks>
            <para>IMAPプロトコルで操作するメールボックスの情報を持つクラスです。</para>
            </remarks>
        </member>
        <member name="F:TKMP.Net.Mailbox._ExistsCount">
            <summary>
            メール数を読み出しを行います
            </summary>
        </member>
        <member name="F:TKMP.Net.Mailbox._RecentCount">
            <summary>
            新着メール数を読み出しを行います
            </summary>
        </member>
        <member name="F:TKMP.Net.Mailbox._MailFlags">
            <summary>
            このメールボックスが扱えるフラグの一覧
            </summary>
        </member>
        <member name="F:TKMP.Net.Mailbox._Mails">
            <summary>
            メールボックス内のメールデータ
            </summary>
        </member>
        <member name="F:TKMP.Net.Mailbox._EventInvokeCall">
            <summary>
            trueでイベントが別スレッドで発行される
            </summary>
        </member>
        <member name="M:TKMP.Net.Mailbox.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Net.Mailbox.ToString">
            <summary>
            このメールボックスの情報を読み出します
            </summary>
            <returns>メールボックスの状態を示す文字列</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.SelectMailbox">
            <summary>
            このメールボックスを選択状態にする
            </summary>
        </member>
        <member name="M:TKMP.Net.Mailbox.SearchMailData(TKMP.Net.SearchKeyBase[])">
            <summary>
            メールボックス内にあるメールで検索条件に一致したメールの一覧を読み出します
            </summary>
            <param name="searchkey">検索条件クラス</param>
            <returns>メールデータの配列</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.GetMailData">
            <summary>
            メールボックス内にあるメールの一覧を読み出します
            </summary>
            <returns>メールデータの配列</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.Rename(System.String)">
            <summary>
            メールボックスの名称を変更します
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.Delete">
            <summary>
            メールボックス削除します
            </summary>
            <returns>正常に削除できたときにtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.GetMailBox(System.String,TKMP.Imap.MailboxCache)">
            <summary>
            LISTで受信したコードからメールボックスの情報クラスを作成する
            </summary>
            <param name="code"></param>
            <param name="mailboxcahe"></param>
            <returns></returns>
        </member>
        <member name="F:TKMP.Net.Mailbox.ENCODEING">
            <summary>
            メールボックスのエンコード方式
            </summary>
        </member>
        <member name="M:TKMP.Net.Mailbox.ImapUtf7Encode(System.String)">
            <summary>
            メールボックス名のエンコードを行う
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.GetImapUtf7EncodeString(System.String)">
            <summary>
            指定した文字列をUTF7へエンコードする
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.ImapUtf7Decode(System.String)">
            <summary>
            メールボックス名のデコードを行う
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.ImapUtf7DecodeMatchEvaluator(System.Text.RegularExpressions.Match)">
            <summary>
            UTF7
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.OnDataForward(TKMP.Net.DataForwardArgs)">
            <summary>
            データ受信中に発生するイベントを発行します
            </summary>
            <param name="e">受信データサイズを格納しているイベントデータ</param>
        </member>
        <member name="M:TKMP.Net.Mailbox.Append(TKMP.Writer.IMailWriter,TKMP.Net.MailFlags)">
            <summary>
            メッセージをメールボックスに保存します
            </summary>
            <param name="writer">保存内容が記録されている<see cref="T:TKMP.Writer.IMailWriter">TKMP.Writer.IMailWriter</see>クラスを指定します</param>
            <param name="mailflags">保存時に追加するフラグを設定します</param>
            <returns>正常に保存されたときにtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.Append(TKMP.Writer.IMailWriter,System.String[])">
            <summary>
            メッセージをメールボックスに保存します
            </summary>
            <param name="writer">保存内容が記録されている<see cref="T:TKMP.Writer.IMailWriter">TKMP.Writer.IMailWriter</see>クラスを指定します</param>
            <param name="flags">保存時に追加するフラグを設定します</param>
            <returns>正常に保存されたときにtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.Append(TKMP.Writer.IMailWriter)">
            <summary>
            メッセージをメールボックスに保存します
            </summary>
            <param name="writer">保存内容が記録されている<see cref="T:TKMP.Writer.IMailWriter">TKMP.Writer.IMailWriter</see>クラスを指定します</param>
            <returns>正常に保存されたときにtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.Append(TKMP.Writer.IMailWriter,TKMP.Net.MailFlags,System.String[])">
            <summary>
            メッセージをメールボックスに保存します
            </summary>
            <param name="writer">保存内容が記録されている<see cref="T:TKMP.Writer.IMailWriter">TKMP.Writer.IMailWriter</see>クラスを指定します</param>
            <param name="mailflags">保存時に追加するフラグを設定します</param>
            <param name="flags">保存時に追加するフラグを設定します</param>
            <returns>正常に保存されたときにtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.Append(System.Byte[],TKMP.Net.MailFlags)">
            <summary>
            メッセージをメールボックスに保存します
            </summary>
            <param name="data">保存内容が記録されているバイナリデータを指定します</param>
            <param name="mailflags">保存時に追加するフラグを設定します</param>
            <returns>正常に保存されたときにtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.Append(System.Byte[],System.String[])">
            <summary>
            メッセージをメールボックスに保存します
            </summary>
            <param name="data">保存内容が記録されているバイナリデータを指定します</param>
            <param name="flags">保存時に追加するフラグを設定します</param>
            <returns>正常に保存されたときにtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.Append(System.Byte[])">
            <summary>
            メッセージをメールボックスに保存します
            </summary>
            <param name="data">保存内容が記録されているバイナリデータを指定します</param>
            <returns>正常に保存されたときにtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.Append(System.Byte[],TKMP.Net.MailFlags,System.String[])">
            <summary>
            メッセージをメールボックスに保存します
            </summary>
            <param name="data">保存内容が記録されているバイナリデータを指定します</param>
            <param name="mailflags">保存時に追加するフラグを設定します</param>
            <param name="flags">保存時に追加するフラグを設定します</param>
            <returns>正常に保存されたときにtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.Append(System.IO.Stream,TKMP.Net.MailFlags)">
            <summary>
            メッセージをメールボックスに保存します
            </summary>
            <param name="stream">保存内容が記録されているストリームクラスを指定します</param>
            <param name="mailflags">保存時に追加するフラグを設定します</param>
            <returns>正常に保存されたときにtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.Append(System.IO.Stream,System.String[])">
            <summary>
            メッセージをメールボックスに保存します
            </summary>
            <param name="stream">保存内容が記録されているストリームクラスを指定します</param>
            <param name="flags">保存時に追加するフラグを設定します</param>
            <returns>正常に保存されたときにtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.Append(System.IO.Stream)">
            <summary>
            メッセージをメールボックスに保存します
            </summary>
            <param name="stream">保存内容が記録されているストリームクラスを指定します</param>
            <returns>正常に保存されたときにtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.Append(System.IO.Stream,TKMP.Net.MailFlags,System.String[])">
            <summary>
            メッセージをメールボックスに保存します
            </summary>
            <param name="stream">保存内容が記録されているストリームクラスを指定します</param>
            <param name="mailflags">保存時に追加するフラグを設定します</param>
            <param name="flags">保存時に追加するフラグを設定します</param>
            <returns>正常に保存されたときにtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.Mailbox.append_c_DataForward(System.Object,TKMP.Net.DataForwardArgs)">
            <summary>
            メッセージの保存中に発生するイベント処理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:TKMP.Net.Mailbox.Flags">
            <summary>
            このメールボックスの属性を示す値を読み出します
            </summary>
        </member>
        <member name="P:TKMP.Net.Mailbox._Separator">
            <summary>
            このメールボックスの階層区切り文字を読み出します
            </summary>
        </member>
        <member name="P:TKMP.Net.Mailbox.FullName">
            <summary>
            メールボックスの完全な名前の読出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.Mailbox.EncodeName">
            <summary>
            エンコードされたメールボックスの名称の読出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.Mailbox.Name">
            <summary>
            メールボックスのその階層内での名称の読出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.Mailbox.ExistsCount">
            <summary>
            メール数を読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.Mailbox.RecentCount">
            <summary>
            新着メール数を読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.Mailbox.UIDValidity">
            <summary>
            UID-Validityの値を読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.Mailbox.MailFlags">
            <summary>
            このメールボックスが扱えるフラグの一覧を読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Net.Mailbox.MailDatas">
            <summary>
            メールボックス内のメールデータの一覧の読み出しを行います
            </summary>
            <remarks>
            <para>現在メールボックスにあるメールデータの一覧を返します。</para>
            <para>この段階ではまだメールデータの受信は行っていません。メールの受信等の処理はこの一覧から取得した<see cref="T:TKMP.Net.MailData">MailData_Imapクラス</see>で行ってください。</para>
            </remarks>
        </member>
        <member name="P:TKMP.Net.Mailbox.ImapClient">
            <summary>
            操作対象のクライアントクラスの読出しと設定を行います
            </summary>
        </member>
        <member name="P:TKMP.Net.Mailbox.SubMailbox">
            <summary>
            このメールボックスに含まれるメールボックスの一覧を取得します
            </summary>
        </member>
        <member name="P:TKMP.Net.Mailbox.Subscribe">
            <summary>
            このメールボックスが購読状態である事を示す値の読出しと設定を行います
            </summary>
        </member>
        <member name="E:TKMP.Net.Mailbox.DataForward">
            <summary>
            データ受信中に発生するイベント
            </summary>
            <remarks>
            <para>受信バッファにあるデータを処理するごとに発生します。このイベントの処理に時間がかかると通信速度に影響が出ます。</para>
            </remarks>
        </member>
        <member name="T:TKMP.Net.Mailbox.ExString">
            <summary>
            日本語文字列を切り分けるための文字列クラス
            </summary>
        </member>
        <member name="M:TKMP.Net.Mailbox.ExString.GetString(System.String@)">
            <summary>
            指定した文字列の先頭から新しいExStringクラスのインスタンスを作成する
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="P:TKMP.Net.Mailbox.ExString.Code">
            <summary>
            格納文字列
            </summary>
        </member>
        <member name="P:TKMP.Net.Mailbox.ExString.JISWord">
            <summary>
            日本語である事を示す値
            </summary>
        </member>
        <member name="T:TKMP.Net.APopLogon">
            <summary>
            ＰＯＰ３サーベーへ接続するときにＡＰＯＰで認証を行うためのクラス
            </summary>
        </member>
        <member name="F:TKMP.Net.APopLogon._UserID">
            <summary>
            ユーザーＩＤ
            </summary>
        </member>
        <member name="F:TKMP.Net.APopLogon._Password">
            <summary>
            パスワード
            </summary>
        </member>
        <member name="F:TKMP.Net.APopLogon._LogonProcess">
            <summary>
            ログオン処理の識別用
            </summary>
        </member>
        <member name="F:TKMP.Net.APopLogon._Logon">
            <summary>
            ログオン完了でtrue
            </summary>
        </member>
        <member name="M:TKMP.Net.APopLogon.#ctor(System.String,System.String)">
            <summary>
            ＡＰＯＰで認証を行うためのクラスのインスタンスを初期化します
            </summary>
            <param name="UserID">ユーザーＩＤ</param>
            <param name="Password">パスワード</param>
        </member>
        <member name="M:TKMP.Net.APopLogon.TKMP#Net#IPopLogon#Connection(System.String,System.String@)">
            <summary>
            ログオン時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列（送信文字列無しの時はNull）</param>
            <returns>ログオン処理継続でtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.APopLogon.TKMP#Net#IPopLogon#Exit(System.String,System.String@)">
            <summary>
            切断時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列（送信文字列無しの時はNull）</param>
            <returns>切断処理継続でtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.APopLogon.TKMP#Net#IPopLogon#Initialize">
            <summary>
            ログオン処理を最初からやり直すための初期化を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Net.APopLogon.TKMP#Net#IPopLogon#Logon">
            <summary>
            ログオンが正常に行われたことを示す値を読み出す
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.FETCH_HEAD">
            <summary>
            FETCHコマンドを発行する
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.FETCH_HEAD._UID">
            <summary>
            識別用のUID
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.FETCH_HEAD.#ctor(TKMP.Net.MailData_Imap)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.FETCH_HEAD.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="P:TKMP.Imap.Command.FETCH_HEAD.Data">
            <summary>
            読み込み済みデータの読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.CREATE">
            <summary>
            CREATEコマンドを発行する
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.CREATE._NewName">
            <summary>
            作成する名称
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.CREATE.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.CREATE.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Pop.Command.CAPA">
            <summary>
            使用可能な拡張コマンドを調べるためのコマンド
            </summary>
        </member>
        <member name="F:TKMP.Pop.Command.CAPA._CommandList">
            <summary>
            取得したコマンドリスト
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.CAPA.CanSipport(TKMP.Pop.Command.CommandBase)">
            <summary>
            コマンドのサポート状況を調べる
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:TKMP.Pop.Command.CAPA.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.CAPA.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.FETCH_BODY">
            <summary>
            FETCHコマンドを発行する
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.FETCH_BODY._UID">
            <summary>
            識別用のUID
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.FETCH_BODY.#ctor(TKMP.Net.MailData_Imap)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.FETCH_BODY.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="P:TKMP.Imap.Command.FETCH_BODY.Data">
            <summary>
            読み込み済みデータの読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Smtp.Connection">
            <summary>
            接続管理用のクラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Connection._ReceiveBlockSize">
            <summary>
            受信バッファの最大サイズ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Connection.OnMessageReceive(TKMP.Net.MessageArgs)">
            <summary>
             データ送信直後のイベントを発生します
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Smtp.Connection.OnMessageSend(TKMP.Net.MessageArgs)">
            <summary>
             データ送信直後のイベントを発生します
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:TKMP.Smtp.Connection._HostName">
            <summary>
            接続先のホスト名
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Connection._Port">
            <summary>
            接続ポート番号
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Connection._TimeOutInterval">
            <summary>
            タイムアウトまでの時間
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Connection._NetStream">
            <summary>
            送受信を行うためのストリームクラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Connection._Socket">
            <summary>
            通信ソケットクラス
            </summary>
        </member>
        <member name="F:TKMP.Smtp.Connection._MessageLog">
            <summary>
            メッセージログを記録するクラス
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Connection.#ctor(System.String,System.Int32,System.Int32,TKMP.Net.MessageLog)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Connection.Connect">
            <summary>
            接続開始
            </summary>
            <returns>接続直後に受信した文字列</returns>
        </member>
        <member name="M:TKMP.Smtp.Connection.ConnectSSL(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            接続開始
            </summary>
            <returns>接続直後に受信した文字列</returns>
        </member>
        <member name="M:TKMP.Smtp.Connection.ConnectPrivate(System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            接続開始
            </summary>
            <returns>接続直後に受信した文字列</returns>
        </member>
        <member name="M:TKMP.Smtp.Connection.Close">
            <summary>
            通信切断処理
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Connection.ChangeTLSAuthenticate(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            通信処理をＴＬＳへ変更する
            </summary>
        </member>
        <member name="M:TKMP.Smtp.Connection.SendCommand(TKMP.Smtp.Command.CommandBase)">
            <summary>
            コマンドの処理を行うクラス
            </summary>
            <param name="Command"></param>
        </member>
        <member name="M:TKMP.Smtp.Connection.Command_MessageSend(System.Object,TKMP.Net.MessageArgs)">
            <summary>
            メッセージを送信したときのイベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TKMP.Smtp.Connection.Command_MessageReceive(System.Object,TKMP.Net.MessageArgs)">
            <summary>
            メッセージを受信したときのイベント
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:TKMP.Smtp.Connection.MessageReceive">
            <summary>
            データ送信直後のイベント
            </summary>
        </member>
        <member name="E:TKMP.Smtp.Connection.MessageSend">
            <summary>
            データ送信直直後のイベント
            </summary>
        </member>
        <member name="P:TKMP.Smtp.Connection.TimeOutInterval">
            <summary>
            送受信がタイムアウトする時間（秒単位）の設定と読み出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Smtp.Connection.IsEncrypted">
            <summary>
            現在の通信が暗号化されていることを示す値の読み出しを行います
            </summary>
        </member>
        <member name="T:TKMP.Smtp.Connection.CommandSyncMethod">
            <summary>
            同期実行待ちの時に外部処理を呼び出すためのデリゲート
            </summary>
        </member>
        <member name="T:TKMP.Imap.MailboxCache">
            <summary>
            取得したメールボックスクラスのインスタンスをキャッシュするクラス
            </summary>
        </member>
        <member name="F:TKMP.Imap.MailboxCache._MailboxList">
            <summary>
            キャッシュされているメールボックスの一覧
            </summary>
        </member>
        <member name="M:TKMP.Imap.MailboxCache.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.MailboxCache.GetMailbox(System.String)">
            <summary>
            キャッシュから読出し済みのメールボックスインスタンスを取得する
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:TKMP.Writer.FilePart">
            <summary>
            ファイル情報を格納できるパートクラス
            </summary>
        </member>
        <member name="F:TKMP.Writer.FilePart._FileTransfer">
            <summary>
            添付ファイルのエンコード方法
            </summary>
        </member>
        <member name="F:TKMP.Writer.FilePart._MIMEType">
            <summary>
            添付ファイルのＭＩＥＭ情報
            </summary>
        </member>
        <member name="F:TKMP.Writer.FilePart._FileData">
            <summary>
            添付ファイルのデータ情報
            </summary>
        </member>
        <member name="F:TKMP.Writer.FilePart._RFC2231Enable">
            <summary>
            ファイル名をRFC2231形式で作成することを示す値
            </summary>
        </member>
        <member name="F:TKMP.Writer.FilePart._Headers">
            <summary>
            ヘッダ情報の一覧
            </summary>
        </member>
        <member name="M:TKMP.Writer.FilePart.#ctor(System.String)">
            <summary>
            ファイル情報を格納するパートの新しいインスタンスを作成します
            </summary>
            <param name="Filename">添付ファイルのパスを指定します</param>
        </member>
        <member name="M:TKMP.Writer.FilePart.#ctor(System.String,System.String)">
            <summary>
            ファイル情報を格納するパートの新しいインスタンスを作成します
            </summary>
            <param name="Filename">添付ファイルのパスを指定します</param>
            <param name="MIMEType">添付ファイルのMIMEを指定します</param>
        </member>
        <member name="M:TKMP.Writer.FilePart.#ctor(System.Byte[],System.String)">
            <summary>
            バイナリデータを添付ファイルとして送信するためのパートの新しいインスタンスを作成します
            </summary>
            <param name="Data">送信するバイナリデータを指定します</param>
            <param name="TempFilename">メールに添付されるときのファイル名を指定します</param>
        </member>
        <member name="M:TKMP.Writer.FilePart.#ctor(System.Byte[],System.String,System.String)">
            <summary>
            バイナリデータを添付ファイルとして送信するためのパートの新しいインスタンスを作成します
            </summary>
            <param name="Data">送信するバイナリデータを指定します</param>
            <param name="TempFilename">メールに添付されるときのファイル名を指定します</param>
            <param name="MIMEType">添付ファイルのMIMEを指定します</param>
        </member>
        <member name="M:TKMP.Writer.FilePart.GetBodyStream">
            <summary>
            本文のデータストリームの読出しを行います
            </summary>
            <returns>送信用の文字列を格納したストリーム</returns>
        </member>
        <member name="M:TKMP.Writer.FilePart.SetHeaderData">
            <summary>
            ヘッダ情報を更新します
            </summary>
        </member>
        <member name="M:TKMP.Writer.FilePart.RFC2231FileName">
            <summary>
            RFC2231形式でのファイル名データを作成します
            </summary>
            <returns></returns>
        </member>
        <member name="P:TKMP.Writer.FilePart.RFC2231Enable">
            <summary>
            ファイル名をRFC2231形式で作成することを示す値の読み出しと設定を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Writer.FilePart.Headers">
            <summary>
            パート固有のヘッダ情報を格納するコレクションの読出しを行います
            </summary>
        </member>
        <member name="P:TKMP.Writer.FilePart.MIMEType">
            <summary>
            添付ファイルのＭＩＥＭ情報の読出しと設定を行います
            </summary>
        </member>
        <member name="P:TKMP.Writer.FilePart.FileName">
            <summary>
            メール情報に追加されるファイル名の読み出しと設定を行います
            </summary>
        </member>
        <member name="T:TKMP.Writer.FilePart.FileDataBase">
            <summary>
            添付ファイルデータ情報の基本クラス
            </summary>
        </member>
        <member name="F:TKMP.Writer.FilePart.FileDataBase.FileName">
            <summary>
            ヘッダに追加されるファイル名
            </summary>
        </member>
        <member name="M:TKMP.Writer.FilePart.FileDataBase.Data">
            <summary>
            添付されるデータ
            </summary>
            <returns></returns>
        </member>
        <member name="T:TKMP.Writer.FilePart.IOFile">
            <summary>
            ストレージ内のファイルを添付データにするためのクラス
            </summary>
        </member>
        <member name="F:TKMP.Writer.FilePart.IOFile._File">
            <summary>
            データの場所
            </summary>
        </member>
        <member name="M:TKMP.Writer.FilePart.IOFile.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="FileName"></param>
        </member>
        <member name="M:TKMP.Writer.FilePart.IOFile.Data">
            <summary>
            添付されるデータ
            </summary>
            <returns></returns>
        </member>
        <member name="T:TKMP.Writer.FilePart.BinaryData">
            <summary>
            バイト配列を添付データにするためのクラス
            </summary>
        </member>
        <member name="F:TKMP.Writer.FilePart.BinaryData._Data">
            <summary>
            添付データ情報
            </summary>
        </member>
        <member name="M:TKMP.Writer.FilePart.BinaryData.#ctor(System.Byte[],System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="Data"></param>
            <param name="TempFilename"></param>
        </member>
        <member name="M:TKMP.Writer.FilePart.BinaryData.Data">
            <summary>
            添付されるデータ
            </summary>
            <returns></returns>
        </member>
        <member name="T:TKMP.Pop.Command.TOP">
            <summary>
            メールヘッダーの読み出しコマンドを発行します
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.TOP.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Pop.Command.TOP.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
        <member name="T:TKMP.Net.BasicImapLogon">
            <summary>
            ＩＭＡＰサーベーへ接続するときの最も基本的な認証方法を提供するクラス
            </summary>
        </member>
        <member name="F:TKMP.Net.BasicImapLogon._UserID">
            <summary>
            ユーザーＩＤ
            </summary>
        </member>
        <member name="F:TKMP.Net.BasicImapLogon._Password">
            <summary>
            パスワード
            </summary>
        </member>
        <member name="F:TKMP.Net.BasicImapLogon._LogonProcess">
            <summary>
            ログオン処理の識別用
            </summary>
        </member>
        <member name="F:TKMP.Net.BasicImapLogon._Logon">
            <summary>
            ログオン完了でtrue
            </summary>
        </member>
        <member name="M:TKMP.Net.BasicImapLogon.#ctor(System.String,System.String)">
            <summary>
            基本的な認証方法を処理するクラスのインスタンスを初期化します
            </summary>
            <param name="UserID">ユーザーＩＤ</param>
            <param name="Password">パスワード</param>
        </member>
        <member name="M:TKMP.Net.BasicImapLogon.Connection(System.String,System.String@,System.String@)">
            <summary>
            ログオン時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列（送信文字列無しの時はNull）</param>
            <param name="LogMessage">通信ログで表示する文字列が返されます。通常パスワードなど非表示としたい通信内容の場合に内容がセットされます。Sendを通信ログとする場合はNullがセットされます</param>
            <returns>ログオン処理を継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.BasicImapLogon.TKMP#Net#IImapLogon#Exit(System.String,System.String@)">
            <summary>
            切断時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列（送信文字列無しの時はNull）</param>
            <returns>切断処理が継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.BasicImapLogon.TKMP#Net#IImapLogon#Initialize">
            <summary>
            ログオン処理を最初からやり直すための初期化を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Net.BasicImapLogon.TKMP#Net#IImapLogon#Logon">
            <summary>
            ログオンが正常に行われたことを示す値を読み出す
            </summary>
        </member>
        <member name="T:TKMP.Net.AuthLogin">
            <summary>
            SMTP AUTH LOGINでログオンを行うためのクラス 
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthLogin._UserID">
            <summary>
            ユーザーＩＤ
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthLogin._Password">
            <summary>
            パスワード
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthLogin._LogonProcess">
            <summary>
            ログオン処理の識別用
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthLogin._Logon">
            <summary>
            ログオン完了でtrue
            </summary>
        </member>
        <member name="M:TKMP.Net.AuthLogin.#ctor(System.String,System.String)">
            <summary>
            SMTP AUTH LOGINでログオンを行うためのクラスのインスタンスを初期化します
            </summary>
            <param name="UserID">ユーザーＩＤ</param>
            <param name="Password">パスワード</param>
        </member>
        <member name="M:TKMP.Net.AuthLogin.TKMP#Net#ISmtpLogon#Greeting(System.String)">
            <summary>
            接続の確立直後の送信メッセージをセットします。
            </summary>
            <param name="Receive">受信した文字列</param>
            <returns>送信文字列が返されます（送信文字列無しの時はNull）</returns>
        </member>
        <member name="M:TKMP.Net.AuthLogin.TKMP#Net#ISmtpLogon#Connection(System.String,System.String@,System.String@)">
            <summary>
            ログオン時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列が返されます（送信文字列無しの時はNull）</param>
            <param name="LogMessage">通信ログで表示する文字列が返されます。通常パスワードなど非表示としたい通信内容の場合に内容がセットされます。Sendを通信ログとする場合はNullがセットされます</param>
            <returns>ログオン処理を継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.AuthLogin.TKMP#Net#ISmtpLogon#Initialize">
            <summary>
            ログオン処理を最初からやり直すための初期化を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Net.AuthLogin.TKMP#Net#ISmtpLogon#Logon">
            <summary>
            ログオンが正常に行われたことを示す値読み出します
            </summary>
        </member>
        <member name="T:TKMP.Net.AuthCramMd5">
            <summary>
            SMTP AUTH CRAM-MD5でログオンを行うためのクラス 
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthCramMd5._UserID">
            <summary>
            ユーザーＩＤ
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthCramMd5._Password">
            <summary>
            パスワード
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthCramMd5._LogonProcess">
            <summary>
            ログオン処理の識別用
            </summary>
        </member>
        <member name="F:TKMP.Net.AuthCramMd5._Logon">
            <summary>
            ログオン完了でtrue
            </summary>
        </member>
        <member name="M:TKMP.Net.AuthCramMd5.#ctor(System.String,System.String)">
            <summary>
            SMTP AUTH CRAM-MD5でログオンを行うためのクラスのインスタンスを初期化します
            </summary>
            <param name="UserID">ユーザーＩＤ</param>
            <param name="Password">パスワード</param>
        </member>
        <member name="M:TKMP.Net.AuthCramMd5.TKMP#Net#ISmtpLogon#Greeting(System.String)">
            <summary>
            接続の確立直後の送信メッセージをセットします。
            </summary>
            <param name="Receive">受信した文字列</param>
            <returns>送信文字列が返されます（送信文字列無しの時はNull）</returns>
        </member>
        <member name="M:TKMP.Net.AuthCramMd5.TKMP#Net#ISmtpLogon#Connection(System.String,System.String@,System.String@)">
            <summary>
            ログオン時の受信文字列に対する次の送信文字列をセットします
            </summary>
            <param name="Receive">受信した文字列</param>
            <param name="Send">送信文字列が返されます（送信文字列無しの時はNull）</param>
            <param name="LogMessage">通信ログで表示する文字列が返されます。通常パスワードなど非表示としたい通信内容の場合に内容がセットされます。Sendを通信ログとする場合はNullがセットされます</param>
            <returns>ログオン処理を継続する場合にtrueを返します</returns>
        </member>
        <member name="M:TKMP.Net.AuthCramMd5.TKMP#Net#ISmtpLogon#Initialize">
            <summary>
            ログオン処理を最初からやり直すための初期化を行ないます
            </summary>
        </member>
        <member name="P:TKMP.Net.AuthCramMd5.TKMP#Net#ISmtpLogon#Logon">
            <summary>
            ログオンが正常に行われたことを示す値読み出します
            </summary>
        </member>
        <member name="T:TKMP.Imap.Command.UNSUBSCRIBE">
            <summary>
            UNSUBSCRIBEコマンドを発行する
            </summary>
        </member>
        <member name="F:TKMP.Imap.Command.UNSUBSCRIBE._MailBox">
            <summary>
            選択するメールボックス名
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.UNSUBSCRIBE.#ctor(TKMP.Net.Mailbox)">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TKMP.Imap.Command.UNSUBSCRIBE.CommandExecution">
            <summary>
            通信を実行します
            </summary>
        </member>
    </members>
</doc>
